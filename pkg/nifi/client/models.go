package nifi

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "encoding/json"
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/date"
)

// The package's fully qualified name.
const fqdn = "client"

        // Action enumerates the values for action.
    type Action string

    const (
                // READ ...
        READ Action = "READ"
                // WRITE ...
        WRITE Action = "WRITE"
            )
    // PossibleActionValues returns an array of possible values for the Action const type.
    func PossibleActionValues() []Action {
        return []Action{READ,WRITE}
    }

        // Action1 enumerates the values for action 1.
    type Action1 string

    const (
                // Action1READ ...
        Action1READ Action1 = "READ"
                // Action1WRITE ...
        Action1WRITE Action1 = "WRITE"
            )
    // PossibleAction1Values returns an array of possible values for the Action1 const type.
    func PossibleAction1Values() []Action1 {
        return []Action1{Action1READ,Action1WRITE}
    }

        // DestinationType enumerates the values for destination type.
    type DestinationType string

    const (
                // FUNNEL ...
        FUNNEL DestinationType = "FUNNEL"
                // INPUTPORT ...
        INPUTPORT DestinationType = "INPUT_PORT"
                // OUTPUTPORT ...
        OUTPUTPORT DestinationType = "OUTPUT_PORT"
                // PROCESSOR ...
        PROCESSOR DestinationType = "PROCESSOR"
                // REMOTEINPUTPORT ...
        REMOTEINPUTPORT DestinationType = "REMOTE_INPUT_PORT"
                // REMOTEOUTPUTPORT ...
        REMOTEOUTPUTPORT DestinationType = "REMOTE_OUTPUT_PORT"
            )
    // PossibleDestinationTypeValues returns an array of possible values for the DestinationType const type.
    func PossibleDestinationTypeValues() []DestinationType {
        return []DestinationType{FUNNEL,INPUTPORT,OUTPUTPORT,PROCESSOR,REMOTEINPUTPORT,REMOTEOUTPUTPORT}
    }

        // LineageRequestType enumerates the values for lineage request type.
    type LineageRequestType string

    const (
                // AndFLOWFILE ...
        AndFLOWFILE LineageRequestType = "and FLOWFILE"
                // CHILDREN ...
        CHILDREN LineageRequestType = "CHILDREN"
                // FLOWFILE ...
        FLOWFILE LineageRequestType = "FLOWFILE"
                // PARENTS ...
        PARENTS LineageRequestType = "PARENTS"
            )
    // PossibleLineageRequestTypeValues returns an array of possible values for the LineageRequestType const type.
    func PossibleLineageRequestTypeValues() []LineageRequestType {
        return []LineageRequestType{AndFLOWFILE,CHILDREN,FLOWFILE,PARENTS}
    }

        // ReferenceType enumerates the values for reference type.
    type ReferenceType string

    const (
                // ControllerService ...
        ControllerService ReferenceType = "ControllerService"
                // OrReportingTask ...
        OrReportingTask ReferenceType = "or ReportingTask"
                // Processor ...
        Processor ReferenceType = "Processor"
            )
    // PossibleReferenceTypeValues returns an array of possible values for the ReferenceType const type.
    func PossibleReferenceTypeValues() []ReferenceType {
        return []ReferenceType{ControllerService,OrReportingTask,Processor}
    }

        // RunStatus enumerates the values for run status.
    type RunStatus string

    const (
                // DISABLED ...
        DISABLED RunStatus = "DISABLED"
                // INVALID ...
        INVALID RunStatus = "INVALID"
                // RUNNING ...
        RUNNING RunStatus = "RUNNING"
                // STOPPED ...
        STOPPED RunStatus = "STOPPED"
            )
    // PossibleRunStatusValues returns an array of possible values for the RunStatus const type.
    func PossibleRunStatusValues() []RunStatus {
        return []RunStatus{DISABLED,INVALID,RUNNING,STOPPED}
    }

        // SourceType enumerates the values for source type.
    type SourceType string

    const (
                // SourceTypeFUNNEL ...
        SourceTypeFUNNEL SourceType = "FUNNEL"
                // SourceTypeINPUTPORT ...
        SourceTypeINPUTPORT SourceType = "INPUT_PORT"
                // SourceTypeOUTPUTPORT ...
        SourceTypeOUTPUTPORT SourceType = "OUTPUT_PORT"
                // SourceTypePROCESSOR ...
        SourceTypePROCESSOR SourceType = "PROCESSOR"
                // SourceTypeREMOTEINPUTPORT ...
        SourceTypeREMOTEINPUTPORT SourceType = "REMOTE_INPUT_PORT"
                // SourceTypeREMOTEOUTPUTPORT ...
        SourceTypeREMOTEOUTPUTPORT SourceType = "REMOTE_OUTPUT_PORT"
            )
    // PossibleSourceTypeValues returns an array of possible values for the SourceType const type.
    func PossibleSourceTypeValues() []SourceType {
        return []SourceType{SourceTypeFUNNEL,SourceTypeINPUTPORT,SourceTypeOUTPUTPORT,SourceTypePROCESSOR,SourceTypeREMOTEINPUTPORT,SourceTypeREMOTEOUTPUTPORT}
    }

        // State enumerates the values for state.
    type State string

    const (
                // StateDISABLED ...
        StateDISABLED State = "DISABLED"
                // StateRUNNING ...
        StateRUNNING State = "RUNNING"
                // StateSTOPPED ...
        StateSTOPPED State = "STOPPED"
            )
    // PossibleStateValues returns an array of possible values for the State const type.
    func PossibleStateValues() []State {
        return []State{StateDISABLED,StateRUNNING,StateSTOPPED}
    }

        // State1 enumerates the values for state 1.
    type State1 string

    const (
                // State1DISABLED ...
        State1DISABLED State1 = "DISABLED"
                // State1DISABLING ...
        State1DISABLING State1 = "DISABLING"
                // State1ENABLED ...
        State1ENABLED State1 = "ENABLED"
                // State1ENABLING ...
        State1ENABLING State1 = "ENABLING"
            )
    // PossibleState1Values returns an array of possible values for the State1 const type.
    func PossibleState1Values() []State1 {
        return []State1{State1DISABLED,State1DISABLING,State1ENABLED,State1ENABLING}
    }

        // State2 enumerates the values for state 2.
    type State2 string

    const (
                // State2DISABLED ...
        State2DISABLED State2 = "DISABLED"
                // State2RUNNING ...
        State2RUNNING State2 = "RUNNING"
                // State2STOPPED ...
        State2STOPPED State2 = "STOPPED"
            )
    // PossibleState2Values returns an array of possible values for the State2 const type.
    func PossibleState2Values() []State2 {
        return []State2{State2DISABLED,State2RUNNING,State2STOPPED}
    }

        // State3 enumerates the values for state 3.
    type State3 string

    const (
                // State3DISABLED ...
        State3DISABLED State3 = "DISABLED"
                // State3RUNNING ...
        State3RUNNING State3 = "RUNNING"
                // State3STOPPED ...
        State3STOPPED State3 = "STOPPED"
            )
    // PossibleState3Values returns an array of possible values for the State3 const type.
    func PossibleState3Values() []State3 {
        return []State3{State3DISABLED,State3RUNNING,State3STOPPED}
    }

        // State4 enumerates the values for state 4.
    type State4 string

    const (
                // State4RUNNING ...
        State4RUNNING State4 = "RUNNING"
                // State4STOPPED ...
        State4STOPPED State4 = "STOPPED"
            )
    // PossibleState4Values returns an array of possible values for the State4 const type.
    func PossibleState4Values() []State4 {
        return []State4{State4RUNNING,State4STOPPED}
    }

        // State5 enumerates the values for state 5.
    type State5 string

    const (
                // State5DISABLED ...
        State5DISABLED State5 = "DISABLED"
                // State5ENABLED ...
        State5ENABLED State5 = "ENABLED"
                // State5RUNNING ...
        State5RUNNING State5 = "RUNNING"
                // State5STOPPED ...
        State5STOPPED State5 = "STOPPED"
            )
    // PossibleState5Values returns an array of possible values for the State5 const type.
    func PossibleState5Values() []State5 {
        return []State5{State5DISABLED,State5ENABLED,State5RUNNING,State5STOPPED}
    }

        // Type enumerates the values for type.
    type Type string

    const (
                // TypeFUNNEL ...
        TypeFUNNEL Type = "FUNNEL"
                // TypeINPUTPORT ...
        TypeINPUTPORT Type = "INPUT_PORT"
                // TypeOUTPUTPORT ...
        TypeOUTPUTPORT Type = "OUTPUT_PORT"
                // TypePROCESSOR ...
        TypePROCESSOR Type = "PROCESSOR"
                // TypeREMOTEINPUTPORT ...
        TypeREMOTEINPUTPORT Type = "REMOTE_INPUT_PORT"
                // TypeREMOTEOUTPUTPORT ...
        TypeREMOTEOUTPUTPORT Type = "REMOTE_OUTPUT_PORT"
            )
    // PossibleTypeValues returns an array of possible values for the Type const type.
    func PossibleTypeValues() []Type {
        return []Type{TypeFUNNEL,TypeINPUTPORT,TypeOUTPUTPORT,TypePROCESSOR,TypeREMOTEINPUTPORT,TypeREMOTEOUTPUTPORT}
    }

        // Type1 enumerates the values for type 1.
    type Type1 string

    const (
                // Type1INPUTPORT ...
        Type1INPUTPORT Type1 = "INPUT_PORT"
                // Type1OUTPUTPORT ...
        Type1OUTPUTPORT Type1 = "OUTPUT_PORT"
            )
    // PossibleType1Values returns an array of possible values for the Type1 const type.
    func PossibleType1Values() []Type1 {
        return []Type1{Type1INPUTPORT,Type1OUTPUTPORT}
    }

        // Type2 enumerates the values for type 2.
    type Type2 string

    const (
                // Type2EVENT ...
        Type2EVENT Type2 = "EVENT"
                // Type2FLOWFILE ...
        Type2FLOWFILE Type2 = "FLOWFILE"
            )
    // PossibleType2Values returns an array of possible values for the Type2 const type.
    func PossibleType2Values() []Type2 {
        return []Type2{Type2EVENT,Type2FLOWFILE}
    }

            // AboutDTO ...
            type AboutDTO struct {
            // Title - The title to be used on the page and in the about dialog.
            Title *string `json:"title,omitempty"`
            // Version - The version of this NiFi.
            Version *string `json:"version,omitempty"`
            // URI - The URI for the NiFi.
            URI *string `json:"uri,omitempty"`
            // ContentViewerURL - The URL for the content viewer if configured.
            ContentViewerURL *string `json:"contentViewerUrl,omitempty"`
            // Timezone - The timezone of the NiFi instance.
            Timezone *string `json:"timezone,omitempty"`
            }

            // AboutEntity ...
            type AboutEntity struct {
            autorest.Response `json:"-"`
            About *AboutDTO `json:"about,omitempty"`
            }

            // AccessConfigurationDTO ...
            type AccessConfigurationDTO struct {
            // SupportsLogin - Indicates whether or not this NiFi supports user login.
            SupportsLogin *bool `json:"supportsLogin,omitempty"`
            }

            // AccessConfigurationEntity ...
            type AccessConfigurationEntity struct {
            autorest.Response `json:"-"`
            Config *AccessConfigurationDTO `json:"config,omitempty"`
            }

            // AccessPolicyDTO ...
            type AccessPolicyDTO struct {
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // ParentGroupID - The id of parent process group of this component if applicable.
            ParentGroupID *string `json:"parentGroupId,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            // Resource - The resource for this access policy.
            Resource *string `json:"resource,omitempty"`
            // Action - The action associated with this access policy. Possible values include: 'READ', 'WRITE'
            Action Action `json:"action,omitempty"`
            // Users - The set of user IDs associated with this access policy.
            Users *[]TenantEntity `json:"users,omitempty"`
            // UserGroups - The set of user group IDs associated with this access policy.
            UserGroups *[]TenantEntity `json:"userGroups,omitempty"`
            }

            // AccessPolicyEntity ...
            type AccessPolicyEntity struct {
            autorest.Response `json:"-"`
            // Revision - The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.
            Revision *RevisionDTO `json:"revision,omitempty"`
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // URI - The URI for futures requests to the component.
            URI *string `json:"uri,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            // Permissions - The permissions for this component.
            Permissions *PermissionsDTO `json:"permissions,omitempty"`
            // Bulletins - The bulletins for this component.
            Bulletins *[]BulletinEntity `json:"bulletins,omitempty"`
            Generated *date.Time `json:"generated,omitempty"`
            Component *AccessPolicyDTO `json:"component,omitempty"`
            }

            // AccessPolicySummaryDTO ...
            type AccessPolicySummaryDTO struct {
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // ParentGroupID - The id of parent process group of this component if applicable.
            ParentGroupID *string `json:"parentGroupId,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            // Resource - The resource for this access policy.
            Resource *string `json:"resource,omitempty"`
            // Action - The action associated with this access policy. Possible values include: 'Action1READ', 'Action1WRITE'
            Action Action1 `json:"action,omitempty"`
            }

            // AccessPolicySummaryEntity ...
            type AccessPolicySummaryEntity struct {
            // Revision - The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.
            Revision *RevisionDTO `json:"revision,omitempty"`
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // URI - The URI for futures requests to the component.
            URI *string `json:"uri,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            // Permissions - The permissions for this component.
            Permissions *PermissionsDTO `json:"permissions,omitempty"`
            // Bulletins - The bulletins for this component.
            Bulletins *[]BulletinEntity `json:"bulletins,omitempty"`
            Component *AccessPolicySummaryDTO `json:"component,omitempty"`
            }

            // AccessStatusDTO ...
            type AccessStatusDTO struct {
            // Identity - The user identity.
            Identity *string `json:"identity,omitempty"`
            // Status - The user access status.
            Status *string `json:"status,omitempty"`
            // Message - Additional details about the user access status.
            Message *string `json:"message,omitempty"`
            }

            // AccessStatusEntity ...
            type AccessStatusEntity struct {
            autorest.Response `json:"-"`
            AccessStatus *AccessStatusDTO `json:"accessStatus,omitempty"`
            }

            // ActionDTO ...
            type ActionDTO struct {
            // ID - The action id.
            ID *int32 `json:"id,omitempty"`
            // UserIdentity - The identity of the user that performed the action.
            UserIdentity *string `json:"userIdentity,omitempty"`
            // Timestamp - The timestamp of the action.
            Timestamp *string `json:"timestamp,omitempty"`
            // SourceID - The id of the source component.
            SourceID *string `json:"sourceId,omitempty"`
            // SourceName - The name of the source component.
            SourceName *string `json:"sourceName,omitempty"`
            // SourceType - The type of the source component.
            SourceType *string `json:"sourceType,omitempty"`
            // ComponentDetails - The details of the source component.
            ComponentDetails interface{} `json:"componentDetails,omitempty"`
            // Operation - The operation that was performed.
            Operation *string `json:"operation,omitempty"`
            // ActionDetails - The details of the action.
            ActionDetails interface{} `json:"actionDetails,omitempty"`
            }

            // ActionEntity ...
            type ActionEntity struct {
            autorest.Response `json:"-"`
            ID *int32 `json:"id,omitempty"`
            Timestamp *date.Time `json:"timestamp,omitempty"`
            SourceID *string `json:"sourceId,omitempty"`
            // CanRead - Indicates whether the user can read a given resource.
            CanRead *bool `json:"canRead,omitempty"`
            Action *ActionDTO `json:"action,omitempty"`
            }

            // AllowableValueDTO ...
            type AllowableValueDTO struct {
            // DisplayName - A human readable value that is allowed for the property descriptor.
            DisplayName *string `json:"displayName,omitempty"`
            // Value - A value that is allowed for the property descriptor.
            Value *string `json:"value,omitempty"`
            // Description - A description for this allowable value.
            Description *string `json:"description,omitempty"`
            }

            // AllowableValueEntity ...
            type AllowableValueEntity struct {
            AllowableValue *AllowableValueDTO `json:"allowableValue,omitempty"`
            // CanRead - Indicates whether the user can read a given resource.
            CanRead *bool `json:"canRead,omitempty"`
            }

            // AttributeDTO ...
            type AttributeDTO struct {
            // Name - The attribute name.
            Name *string `json:"name,omitempty"`
            // Value - The attribute value.
            Value *string `json:"value,omitempty"`
            // PreviousValue - The value of the attribute before the event took place.
            PreviousValue *string `json:"previousValue,omitempty"`
            }

            // BannerDTO ...
            type BannerDTO struct {
            // HeaderText - The header text.
            HeaderText *string `json:"headerText,omitempty"`
            // FooterText - The footer text.
            FooterText *string `json:"footerText,omitempty"`
            }

            // BannerEntity ...
            type BannerEntity struct {
            autorest.Response `json:"-"`
            Banners *BannerDTO `json:"banners,omitempty"`
            }

            // BulletinBoardDTO ...
            type BulletinBoardDTO struct {
            // Bulletins - The bulletins in the bulletin board, that matches the supplied request.
            Bulletins *[]BulletinEntity `json:"bulletins,omitempty"`
            // Generated - The timestamp when this report was generated.
            Generated *string `json:"generated,omitempty"`
            }

            // BulletinBoardEntity ...
            type BulletinBoardEntity struct {
            autorest.Response `json:"-"`
            BulletinBoard *BulletinBoardDTO `json:"bulletinBoard,omitempty"`
            }

            // BulletinDTO ...
            type BulletinDTO struct {
            // ID - The id of the bulletin.
            ID *int64 `json:"id,omitempty"`
            // NodeAddress - If clustered, the address of the node from which the bulletin originated.
            NodeAddress *string `json:"nodeAddress,omitempty"`
            // Category - The catagory of this bulletin.
            Category *string `json:"category,omitempty"`
            // GroupID - The group id of the source component.
            GroupID *string `json:"groupId,omitempty"`
            // SourceID - The id of the source component.
            SourceID *string `json:"sourceId,omitempty"`
            // SourceName - The name of the source component.
            SourceName *string `json:"sourceName,omitempty"`
            // Level - The level of the bulletin.
            Level *string `json:"level,omitempty"`
            // Message - The bulletin message.
            Message *string `json:"message,omitempty"`
            // Timestamp - When this bulletin was generated.
            Timestamp *string `json:"timestamp,omitempty"`
            }

            // BulletinEntity ...
            type BulletinEntity struct {
            ID *int64 `json:"id,omitempty"`
            GroupID *string `json:"groupId,omitempty"`
            SourceID *string `json:"sourceId,omitempty"`
            Timestamp *date.Time `json:"timestamp,omitempty"`
            NodeAddress *string `json:"nodeAddress,omitempty"`
            // CanRead - Indicates whether the user can read a given resource.
            CanRead *bool `json:"canRead,omitempty"`
            Bulletin *BulletinDTO `json:"bulletin,omitempty"`
            }

            // ClusterDTO ...
            type ClusterDTO struct {
            // Nodes - The collection of nodes that are part of the cluster.
            Nodes *[]NodeDTO `json:"nodes,omitempty"`
            // Generated - The timestamp the report was generated.
            Generated *string `json:"generated,omitempty"`
            }

            // ClusterEntity ...
            type ClusterEntity struct {
            autorest.Response `json:"-"`
            Cluster *ClusterDTO `json:"cluster,omitempty"`
            }

            // ClusterSearchResultsEntity ...
            type ClusterSearchResultsEntity struct {
            autorest.Response `json:"-"`
            NodeResults *[]NodeSearchResultDTO `json:"nodeResults,omitempty"`
            }

            // ComponentHistoryDTO ...
            type ComponentHistoryDTO struct {
            // ComponentID - The component id.
            ComponentID *string `json:"componentId,omitempty"`
            // PropertyHistory - The history for the properties of the component.
            PropertyHistory map[string]*PropertyHistoryDTO `json:"propertyHistory"`
            }

        // MarshalJSON is the custom marshaler for ComponentHistoryDTO.
        func (chd ComponentHistoryDTO)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(chd.ComponentID != nil) {
                objectMap["componentId"] = chd.ComponentID
                }
                if(chd.PropertyHistory != nil) {
                objectMap["propertyHistory"] = chd.PropertyHistory
                }
                return json.Marshal(objectMap)
        }

            // ComponentHistoryEntity ...
            type ComponentHistoryEntity struct {
            autorest.Response `json:"-"`
            ComponentHistory *ComponentHistoryDTO `json:"componentHistory,omitempty"`
            }

            // ComponentSearchResultDTO ...
            type ComponentSearchResultDTO struct {
            // ID - The id of the component that matched the search.
            ID *string `json:"id,omitempty"`
            // GroupID - The group id of the component that matched the search.
            GroupID *string `json:"groupId,omitempty"`
            // Name - The name of the component that matched the search.
            Name *string `json:"name,omitempty"`
            // Matches - What matched the search from the component.
            Matches *[]string `json:"matches,omitempty"`
            }

            // ComponentStateDTO ...
            type ComponentStateDTO struct {
            autorest.Response `json:"-"`
            // ComponentID - The component identifier.
            ComponentID *string `json:"componentId,omitempty"`
            // StateDescription - Description of the state this component persists.
            StateDescription *string `json:"stateDescription,omitempty"`
            // ClusterState - The cluster state for this component, or null if this NiFi is a standalone instance.
            ClusterState *StateMapDTO `json:"clusterState,omitempty"`
            // LocalState - The local state for this component.
            LocalState *StateMapDTO `json:"localState,omitempty"`
            }

            // ConnectableDTO ...
            type ConnectableDTO struct {
            // ID - The id of the connectable component.
            ID *string `json:"id,omitempty"`
            // Type - The type of component the connectable is. Possible values include: 'TypePROCESSOR', 'TypeREMOTEINPUTPORT', 'TypeREMOTEOUTPUTPORT', 'TypeINPUTPORT', 'TypeOUTPUTPORT', 'TypeFUNNEL'
            Type Type `json:"type,omitempty"`
            // GroupID - The id of the group that the connectable component resides in
            GroupID *string `json:"groupId,omitempty"`
            // Name - The name of the connectable component
            Name *string `json:"name,omitempty"`
            // Running - Reflects the current state of the connectable component.
            Running *bool `json:"running,omitempty"`
            // Transmitting - If the connectable component represents a remote port, indicates if the target is configured to transmit.
            Transmitting *bool `json:"transmitting,omitempty"`
            // Exists - If the connectable component represents a remote port, indicates if the target exists.
            Exists *bool `json:"exists,omitempty"`
            // Comments - The comments for the connectable component.
            Comments *string `json:"comments,omitempty"`
            }

            // ConnectionDTO ...
            type ConnectionDTO struct {
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // ParentGroupID - The id of parent process group of this component if applicable.
            ParentGroupID *string `json:"parentGroupId,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            // Source - The source of the connection.
            Source *ConnectableDTO `json:"source,omitempty"`
            // Destination - The destination of the connection.
            Destination *ConnectableDTO `json:"destination,omitempty"`
            // Name - The name of the connection.
            Name *string `json:"name,omitempty"`
            // LabelIndex - The index of the bend point where to place the connection label.
            LabelIndex *int32 `json:"labelIndex,omitempty"`
            // GetzIndex - The z index of the connection.
            GetzIndex *int64 `json:"getzIndex,omitempty"`
            // SelectedRelationships - The selected relationship that comprise the connection.
            SelectedRelationships *[]string `json:"selectedRelationships,omitempty"`
            // AvailableRelationships - The relationships that the source of the connection currently supports.
            AvailableRelationships *[]string `json:"availableRelationships,omitempty"`
            // BackPressureObjectThreshold - The object count threshold for determining when back pressure is applied. Updating this value is a passive change in the sense that it won't impact whether existing files over the limit are affected but it does help feeder processors to stop pushing too much into this work queue.
            BackPressureObjectThreshold *int64 `json:"backPressureObjectThreshold,omitempty"`
            // BackPressureDataSizeThreshold - The object data size threshold for determining when back pressure is applied. Updating this value is a passive change in the sense that it won't impact whether existing files over the limit are affected but it does help feeder processors to stop pushing too much into this work queue.
            BackPressureDataSizeThreshold *string `json:"backPressureDataSizeThreshold,omitempty"`
            // FlowFileExpiration - The amount of time a flow file may be in the flow before it will be automatically aged out of the flow. Once a flow file reaches this age it will be terminated from the flow the next time a processor attempts to start work on it.
            FlowFileExpiration *string `json:"flowFileExpiration,omitempty"`
            // Prioritizers - The comparators used to prioritize the queue.
            Prioritizers *[]string `json:"prioritizers,omitempty"`
            // Bends - The bend points on the connection.
            Bends *[]PositionDTO `json:"bends,omitempty"`
            }

            // ConnectionEntity ...
            type ConnectionEntity struct {
            autorest.Response `json:"-"`
            // Revision - The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.
            Revision *RevisionDTO `json:"revision,omitempty"`
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // URI - The URI for futures requests to the component.
            URI *string `json:"uri,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            // Permissions - The permissions for this component.
            Permissions *PermissionsDTO `json:"permissions,omitempty"`
            // Bulletins - The bulletins for this component.
            Bulletins *[]BulletinEntity `json:"bulletins,omitempty"`
            Component *ConnectionDTO `json:"component,omitempty"`
            // Status - The status of the connection.
            Status *ConnectionStatusDTO `json:"status,omitempty"`
            // Bends - The bend points on the connection.
            Bends *[]PositionDTO `json:"bends,omitempty"`
            // LabelIndex - The index of the bend point where to place the connection label.
            LabelIndex *int32 `json:"labelIndex,omitempty"`
            // GetzIndex - The z index of the connection.
            GetzIndex *int64 `json:"getzIndex,omitempty"`
            // SourceID - The identifier of the source of this connection.
            SourceID *string `json:"sourceId,omitempty"`
            // SourceGroupID - The identifier of the group of the source of this connection.
            SourceGroupID *string `json:"sourceGroupId,omitempty"`
            // SourceType - The type of component the source connectable is. Possible values include: 'SourceTypePROCESSOR', 'SourceTypeREMOTEINPUTPORT', 'SourceTypeREMOTEOUTPUTPORT', 'SourceTypeINPUTPORT', 'SourceTypeOUTPUTPORT', 'SourceTypeFUNNEL'
            SourceType SourceType `json:"sourceType,omitempty"`
            // DestinationID - The identifier of the destination of this connection.
            DestinationID *string `json:"destinationId,omitempty"`
            // DestinationGroupID - The identifier of the group of the destination of this connection.
            DestinationGroupID *string `json:"destinationGroupId,omitempty"`
            // DestinationType - The type of component the destination connectable is. Possible values include: 'PROCESSOR', 'REMOTEINPUTPORT', 'REMOTEOUTPUTPORT', 'INPUTPORT', 'OUTPUTPORT', 'FUNNEL'
            DestinationType DestinationType `json:"destinationType,omitempty"`
            }

            // ConnectionsEntity ...
            type ConnectionsEntity struct {
            autorest.Response `json:"-"`
            Connections *[]ConnectionEntity `json:"connections,omitempty"`
            }

            // ConnectionStatusDTO ...
            type ConnectionStatusDTO struct {
            // ID - The ID of the connection
            ID *string `json:"id,omitempty"`
            // GroupID - The ID of the Process Group that the connection belongs to
            GroupID *string `json:"groupId,omitempty"`
            // Name - The name of the connection
            Name *string `json:"name,omitempty"`
            // StatsLastRefreshed - The timestamp of when the stats were last refreshed
            StatsLastRefreshed *string `json:"statsLastRefreshed,omitempty"`
            // SourceID - The ID of the source component
            SourceID *string `json:"sourceId,omitempty"`
            // SourceName - The name of the source component
            SourceName *string `json:"sourceName,omitempty"`
            // DestinationID - The ID of the destination component
            DestinationID *string `json:"destinationId,omitempty"`
            // DestinationName - The name of the destination component
            DestinationName *string `json:"destinationName,omitempty"`
            // AggregateSnapshot - The status snapshot that represents the aggregate stats of the cluster
            AggregateSnapshot *ConnectionStatusSnapshotDTO `json:"aggregateSnapshot,omitempty"`
            // NodeSnapshots - A list of status snapshots for each node
            NodeSnapshots *[]NodeConnectionStatusSnapshotDTO `json:"nodeSnapshots,omitempty"`
            }

            // ConnectionStatusEntity ...
            type ConnectionStatusEntity struct {
            autorest.Response `json:"-"`
            ConnectionStatus *ConnectionStatusDTO `json:"connectionStatus,omitempty"`
            // CanRead - Indicates whether the user can read a given resource.
            CanRead *bool `json:"canRead,omitempty"`
            }

            // ConnectionStatusSnapshotDTO ...
            type ConnectionStatusSnapshotDTO struct {
            // ID - The id of the connection.
            ID *string `json:"id,omitempty"`
            // GroupID - The id of the process group the connection belongs to.
            GroupID *string `json:"groupId,omitempty"`
            // Name - The name of the connection.
            Name *string `json:"name,omitempty"`
            // SourceID - The id of the source of the connection.
            SourceID *string `json:"sourceId,omitempty"`
            // SourceName - The name of the source of the connection.
            SourceName *string `json:"sourceName,omitempty"`
            // DestinationID - The id of the destination of the connection.
            DestinationID *string `json:"destinationId,omitempty"`
            // DestinationName - The name of the destination of the connection.
            DestinationName *string `json:"destinationName,omitempty"`
            // FlowFilesIn - The number of FlowFiles that have come into the connection in the last 5 minutes.
            FlowFilesIn *int32 `json:"flowFilesIn,omitempty"`
            // BytesIn - The size of the FlowFiles that have come into the connection in the last 5 minutes.
            BytesIn *int64 `json:"bytesIn,omitempty"`
            // Input - The input count/size for the connection in the last 5 minutes, pretty printed.
            Input *string `json:"input,omitempty"`
            // FlowFilesOut - The number of FlowFiles that have left the connection in the last 5 minutes.
            FlowFilesOut *int32 `json:"flowFilesOut,omitempty"`
            // BytesOut - The number of bytes that have left the connection in the last 5 minutes.
            BytesOut *int64 `json:"bytesOut,omitempty"`
            // Output - The output count/sie for the connection in the last 5 minutes, pretty printed.
            Output *string `json:"output,omitempty"`
            // FlowFilesQueued - The number of FlowFiles that are currently queued in the connection.
            FlowFilesQueued *int32 `json:"flowFilesQueued,omitempty"`
            // BytesQueued - The size of the FlowFiles that are currently queued in the connection.
            BytesQueued *int64 `json:"bytesQueued,omitempty"`
            // Queued - The total count and size of queued flowfiles formatted.
            Queued *string `json:"queued,omitempty"`
            // QueuedSize - The total size of flowfiles that are queued formatted.
            QueuedSize *string `json:"queuedSize,omitempty"`
            // QueuedCount - The number of flowfiles that are queued, pretty printed.
            QueuedCount *string `json:"queuedCount,omitempty"`
            }

            // ConnectionStatusSnapshotEntity ...
            type ConnectionStatusSnapshotEntity struct {
            // ID - The id of the connection.
            ID *string `json:"id,omitempty"`
            ConnectionStatusSnapshot *ConnectionStatusSnapshotDTO `json:"connectionStatusSnapshot,omitempty"`
            // CanRead - Indicates whether the user can read a given resource.
            CanRead *bool `json:"canRead,omitempty"`
            }

            // ControllerBulletinsEntity ...
            type ControllerBulletinsEntity struct {
            autorest.Response `json:"-"`
            // Bulletins - System level bulletins to be reported to the user.
            Bulletins *[]BulletinEntity `json:"bulletins,omitempty"`
            // ControllerServiceBulletins - Controller service bulletins to be reported to the user.
            ControllerServiceBulletins *[]BulletinEntity `json:"controllerServiceBulletins,omitempty"`
            // ReportingTaskBulletins - Reporting task bulletins to be reported to the user.
            ReportingTaskBulletins *[]BulletinEntity `json:"reportingTaskBulletins,omitempty"`
            }

            // ControllerConfigurationDTO ...
            type ControllerConfigurationDTO struct {
            // MaxTimerDrivenThreadCount - The maimum number of timer driven threads the NiFi has available.
            MaxTimerDrivenThreadCount *int32 `json:"maxTimerDrivenThreadCount,omitempty"`
            // MaxEventDrivenThreadCount - The maximum number of event driven threads the NiFi has avaiable.
            MaxEventDrivenThreadCount *int32 `json:"maxEventDrivenThreadCount,omitempty"`
            }

            // ControllerConfigurationEntity ...
            type ControllerConfigurationEntity struct {
            autorest.Response `json:"-"`
            // Revision - The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.
            Revision *RevisionDTO `json:"revision,omitempty"`
            // Permissions - The permissions for this component.
            Permissions *PermissionsDTO `json:"permissions,omitempty"`
            // Component - The controller configuration.
            Component *ControllerConfigurationDTO `json:"component,omitempty"`
            }

            // ControllerDTO ...
            type ControllerDTO struct {
            // ID - The id of the NiFi.
            ID *string `json:"id,omitempty"`
            // Name - The name of the NiFi.
            Name *string `json:"name,omitempty"`
            // Comments - The comments for the NiFi.
            Comments *string `json:"comments,omitempty"`
            // RunningCount - The number of running components in the NiFi.
            RunningCount *int32 `json:"runningCount,omitempty"`
            // StoppedCount - The number of stopped components in the NiFi.
            StoppedCount *int32 `json:"stoppedCount,omitempty"`
            // InvalidCount - The number of invalid components in the NiFi.
            InvalidCount *int32 `json:"invalidCount,omitempty"`
            // DisabledCount - The number of disabled components in the NiFi.
            DisabledCount *int32 `json:"disabledCount,omitempty"`
            // ActiveRemotePortCount - The number of active remote ports contained in the NiFi.
            ActiveRemotePortCount *int32 `json:"activeRemotePortCount,omitempty"`
            // InactiveRemotePortCount - The number of inactive remote porst contained in the NiFi.
            InactiveRemotePortCount *int32 `json:"inactiveRemotePortCount,omitempty"`
            // InputPortCount - The number of input ports contained in the NiFi.
            InputPortCount *int32 `json:"inputPortCount,omitempty"`
            // OutputPortCount - The number of output ports in the NiFi.
            OutputPortCount *int32 `json:"outputPortCount,omitempty"`
            // RemoteSiteListeningPort - The Socket Port on which this instance is listening for Remote Transfers of Flow Files. If this instance is not configured to receive Flow Files from remote instances, this will be null.
            RemoteSiteListeningPort *int32 `json:"remoteSiteListeningPort,omitempty"`
            // RemoteSiteHTTPListeningPort - The HTTP(S) Port on which this instance is listening for Remote Transfers of Flow Files. If this instance is not configured to receive Flow Files from remote instances, this will be null.
            RemoteSiteHTTPListeningPort *int32 `json:"remoteSiteHttpListeningPort,omitempty"`
            // SiteToSiteSecure - Indicates whether or not Site-to-Site communications with this instance is secure (2-way authentication).
            SiteToSiteSecure *bool `json:"siteToSiteSecure,omitempty"`
            // InstanceID - If clustered, the id of the Cluster Manager, otherwise the id of the NiFi.
            InstanceID *string `json:"instanceId,omitempty"`
            // InputPorts - The input ports available to send data to for the NiFi.
            InputPorts *[]PortDTO `json:"inputPorts,omitempty"`
            // OutputPorts - The output ports available to received data from the NiFi.
            OutputPorts *[]PortDTO `json:"outputPorts,omitempty"`
            }

            // ControllerEntity ...
            type ControllerEntity struct {
            autorest.Response `json:"-"`
            Controller *ControllerDTO `json:"controller,omitempty"`
            }

            // ControllerServiceDTO ...
            type ControllerServiceDTO struct {
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // ParentGroupID - The id of parent process group of this component if applicable.
            ParentGroupID *string `json:"parentGroupId,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            // Name - The name of the controller service.
            Name *string `json:"name,omitempty"`
            // Type - The type of the controller service.
            Type *string `json:"type,omitempty"`
            // Comments - The comments for the controller service.
            Comments *string `json:"comments,omitempty"`
            // State - The state of the controller service. Possible values include: 'State1ENABLED', 'State1ENABLING', 'State1DISABLED', 'State1DISABLING'
            State State1 `json:"state,omitempty"`
            // PersistsState - Whether the controller service persists state.
            PersistsState *bool `json:"persistsState,omitempty"`
            // Properties - The properties of the controller service.
            Properties map[string]*string `json:"properties"`
            // Descriptors - The descriptors for the controller service properties.
            Descriptors map[string]*PropertyDescriptorDTO `json:"descriptors"`
            // CustomUIURL - The URL for the controller services custom configuration UI if applicable.
            CustomUIURL *string `json:"customUiUrl,omitempty"`
            // AnnotationData - The annontation for the controller service. This is how the custom UI relays configuration to the controller service.
            AnnotationData *string `json:"annotationData,omitempty"`
            // ReferencingComponents - All components referencing this controller service.
            ReferencingComponents *[]ControllerServiceReferencingComponentEntity `json:"referencingComponents,omitempty"`
            // ValidationErrors - The validation errors from the controller service. These validation errors represent the problems with the controller service that must be resolved before it can be enabled.
            ValidationErrors *[]string `json:"validationErrors,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ControllerServiceDTO.
        func (csd ControllerServiceDTO)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(csd.ID != nil) {
                objectMap["id"] = csd.ID
                }
                if(csd.ParentGroupID != nil) {
                objectMap["parentGroupId"] = csd.ParentGroupID
                }
                if(csd.Position != nil) {
                objectMap["position"] = csd.Position
                }
                if(csd.Name != nil) {
                objectMap["name"] = csd.Name
                }
                if(csd.Type != nil) {
                objectMap["type"] = csd.Type
                }
                if(csd.Comments != nil) {
                objectMap["comments"] = csd.Comments
                }
                if(csd.State != "") {
                objectMap["state"] = csd.State
                }
                if(csd.PersistsState != nil) {
                objectMap["persistsState"] = csd.PersistsState
                }
                if(csd.Properties != nil) {
                objectMap["properties"] = csd.Properties
                }
                if(csd.Descriptors != nil) {
                objectMap["descriptors"] = csd.Descriptors
                }
                if(csd.CustomUIURL != nil) {
                objectMap["customUiUrl"] = csd.CustomUIURL
                }
                if(csd.AnnotationData != nil) {
                objectMap["annotationData"] = csd.AnnotationData
                }
                if(csd.ReferencingComponents != nil) {
                objectMap["referencingComponents"] = csd.ReferencingComponents
                }
                if(csd.ValidationErrors != nil) {
                objectMap["validationErrors"] = csd.ValidationErrors
                }
                return json.Marshal(objectMap)
        }

            // ControllerServiceEntity ...
            type ControllerServiceEntity struct {
            autorest.Response `json:"-"`
            // Revision - The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.
            Revision *RevisionDTO `json:"revision,omitempty"`
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // URI - The URI for futures requests to the component.
            URI *string `json:"uri,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            // Permissions - The permissions for this component.
            Permissions *PermissionsDTO `json:"permissions,omitempty"`
            // Bulletins - The bulletins for this component.
            Bulletins *[]BulletinEntity `json:"bulletins,omitempty"`
            Component *ControllerServiceDTO `json:"component,omitempty"`
            }

            // ControllerServiceReferencingComponentDTO ...
            type ControllerServiceReferencingComponentDTO struct {
            // GroupID - The group id for the component referencing a controller service. If this component is another controller service or a reporting task, this field is blank.
            GroupID *string `json:"groupId,omitempty"`
            // ID - The id of the component referencing a controller service.
            ID *string `json:"id,omitempty"`
            // Name - The name of the component referencing a controller service.
            Name *string `json:"name,omitempty"`
            // Type - The type of the component referencing a controller service.
            Type *string `json:"type,omitempty"`
            // State - The state of a processor or reporting task referencing a controller service. If this component is another controller service, this field is blank.
            State *string `json:"state,omitempty"`
            // Properties - The properties for the component.
            Properties map[string]*string `json:"properties"`
            // Descriptors - The descriptors for the componet properties.
            Descriptors map[string]*PropertyDescriptorDTO `json:"descriptors"`
            // ValidationErrors - The validation errors for the component.
            ValidationErrors *[]string `json:"validationErrors,omitempty"`
            // ReferenceType - The type of reference this is. Possible values include: 'Processor', 'ControllerService', 'OrReportingTask'
            ReferenceType ReferenceType `json:"referenceType,omitempty"`
            // ActiveThreadCount - The number of active threads for the referencing component.
            ActiveThreadCount *int32 `json:"activeThreadCount,omitempty"`
            // ReferenceCycle - If the referencing component represents a controller service, this indicates whether it has already been represented in this hierarchy.
            ReferenceCycle *bool `json:"referenceCycle,omitempty"`
            // ReferencingComponents - If the referencing component represents a controller service, these are the components that referenc it.
            ReferencingComponents *Set `json:"referencingComponents,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ControllerServiceReferencingComponentDTO.
        func (csrcd ControllerServiceReferencingComponentDTO)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(csrcd.GroupID != nil) {
                objectMap["groupId"] = csrcd.GroupID
                }
                if(csrcd.ID != nil) {
                objectMap["id"] = csrcd.ID
                }
                if(csrcd.Name != nil) {
                objectMap["name"] = csrcd.Name
                }
                if(csrcd.Type != nil) {
                objectMap["type"] = csrcd.Type
                }
                if(csrcd.State != nil) {
                objectMap["state"] = csrcd.State
                }
                if(csrcd.Properties != nil) {
                objectMap["properties"] = csrcd.Properties
                }
                if(csrcd.Descriptors != nil) {
                objectMap["descriptors"] = csrcd.Descriptors
                }
                if(csrcd.ValidationErrors != nil) {
                objectMap["validationErrors"] = csrcd.ValidationErrors
                }
                if(csrcd.ReferenceType != "") {
                objectMap["referenceType"] = csrcd.ReferenceType
                }
                if(csrcd.ActiveThreadCount != nil) {
                objectMap["activeThreadCount"] = csrcd.ActiveThreadCount
                }
                if(csrcd.ReferenceCycle != nil) {
                objectMap["referenceCycle"] = csrcd.ReferenceCycle
                }
                if(csrcd.ReferencingComponents != nil) {
                objectMap["referencingComponents"] = csrcd.ReferencingComponents
                }
                return json.Marshal(objectMap)
        }

            // ControllerServiceReferencingComponentEntity ...
            type ControllerServiceReferencingComponentEntity struct {
            // Revision - The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.
            Revision *RevisionDTO `json:"revision,omitempty"`
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // URI - The URI for futures requests to the component.
            URI *string `json:"uri,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            // Permissions - The permissions for this component.
            Permissions *PermissionsDTO `json:"permissions,omitempty"`
            // Bulletins - The bulletins for this component.
            Bulletins *[]BulletinEntity `json:"bulletins,omitempty"`
            Component *ControllerServiceReferencingComponentDTO `json:"component,omitempty"`
            }

            // ControllerServiceReferencingComponentsEntity ...
            type ControllerServiceReferencingComponentsEntity struct {
            autorest.Response `json:"-"`
            ControllerServiceReferencingComponents *[]ControllerServiceReferencingComponentEntity `json:"controllerServiceReferencingComponents,omitempty"`
            }

            // ControllerServicesEntity ...
            type ControllerServicesEntity struct {
            autorest.Response `json:"-"`
            // CurrentTime - The current time on the system.
            CurrentTime *string `json:"currentTime,omitempty"`
            ControllerServices *[]ControllerServiceEntity `json:"controllerServices,omitempty"`
            }

            // ControllerServiceTypesEntity ...
            type ControllerServiceTypesEntity struct {
            autorest.Response `json:"-"`
            ControllerServiceTypes *[]DocumentedTypeDTO `json:"controllerServiceTypes,omitempty"`
            }

            // ControllerStatusDTO ...
            type ControllerStatusDTO struct {
            // ActiveThreadCount - The number of active threads in the NiFi.
            ActiveThreadCount *int32 `json:"activeThreadCount,omitempty"`
            // Queued - The number of flowfilew queued in the NiFi.
            Queued *string `json:"queued,omitempty"`
            // FlowFilesQueued - The number of FlowFiles queued across the entire flow
            FlowFilesQueued *int32 `json:"flowFilesQueued,omitempty"`
            // BytesQueued - The size of the FlowFiles queued across the entire flow
            BytesQueued *int64 `json:"bytesQueued,omitempty"`
            // RunningCount - The number of running components in the NiFi.
            RunningCount *int32 `json:"runningCount,omitempty"`
            // StoppedCount - The number of stopped components in the NiFi.
            StoppedCount *int32 `json:"stoppedCount,omitempty"`
            // InvalidCount - The number of invalid components in the NiFi.
            InvalidCount *int32 `json:"invalidCount,omitempty"`
            // DisabledCount - The number of disabled components in the NiFi.
            DisabledCount *int32 `json:"disabledCount,omitempty"`
            // ActiveRemotePortCount - The number of active remote ports in the NiFi.
            ActiveRemotePortCount *int32 `json:"activeRemotePortCount,omitempty"`
            // InactiveRemotePortCount - The number of inactive remote ports in the NiFi.
            InactiveRemotePortCount *int32 `json:"inactiveRemotePortCount,omitempty"`
            }

            // ControllerStatusEntity ...
            type ControllerStatusEntity struct {
            autorest.Response `json:"-"`
            ControllerStatus *ControllerStatusDTO `json:"controllerStatus,omitempty"`
            }

            // CopySnippetRequestEntity ...
            type CopySnippetRequestEntity struct {
            // SnippetID - The identifier of the snippet.
            SnippetID *string `json:"snippetId,omitempty"`
            // OriginX - The x coordinate of the origin of the bounding box where the new components will be placed.
            OriginX *float64 `json:"originX,omitempty"`
            // OriginY - The y coordinate of the origin of the bounding box where the new components will be placed.
            OriginY *float64 `json:"originY,omitempty"`
            }

            // CounterDTO ...
            type CounterDTO struct {
            // ID - The id of the counter.
            ID *string `json:"id,omitempty"`
            // Context - The context of the counter.
            Context *string `json:"context,omitempty"`
            // Name - The name of the counter.
            Name *string `json:"name,omitempty"`
            // ValueCount - The value count.
            ValueCount *int64 `json:"valueCount,omitempty"`
            // Value - The value of the counter.
            Value *string `json:"value,omitempty"`
            }

            // CounterEntity ...
            type CounterEntity struct {
            autorest.Response `json:"-"`
            Counter *CounterDTO `json:"counter,omitempty"`
            }

            // CountersDTO ...
            type CountersDTO struct {
            // AggregateSnapshot - A Counters snapshot that represents the aggregate values of all nodes in the cluster. If the NiFi instance is a standalone instance, rather than a cluster, this represents the stats of the single instance.
            AggregateSnapshot *CountersSnapshotDTO `json:"aggregateSnapshot,omitempty"`
            // NodeSnapshots - A Counters snapshot for each node in the cluster. If the NiFi instance is a standalone instance, rather than a cluster, this may be null.
            NodeSnapshots *[]NodeCountersSnapshotDTO `json:"nodeSnapshots,omitempty"`
            }

            // CountersEntity ...
            type CountersEntity struct {
            autorest.Response `json:"-"`
            Counters *CountersDTO `json:"counters,omitempty"`
            }

            // CountersSnapshotDTO ...
            type CountersSnapshotDTO struct {
            // Generated - The timestamp when the report was generated.
            Generated *string `json:"generated,omitempty"`
            // Counters - All counters in the NiFi.
            Counters *[]CounterDTO `json:"counters,omitempty"`
            }

            // CreateTemplateRequestEntity ...
            type CreateTemplateRequestEntity struct {
            // Name - The name of the template.
            Name *string `json:"name,omitempty"`
            // Description - The description of the template.
            Description *string `json:"description,omitempty"`
            // SnippetID - The identifier of the snippet.
            SnippetID *string `json:"snippetId,omitempty"`
            }

            // CurrentUserEntity ...
            type CurrentUserEntity struct {
            autorest.Response `json:"-"`
            // Identity - The user identity being serialized.
            Identity *string `json:"identity,omitempty"`
            // Anonymous - Whether the current user is anonymous.
            Anonymous *bool `json:"anonymous,omitempty"`
            // ProvenancePermissions - Permissions for querying provenance.
            ProvenancePermissions *PermissionsDTO `json:"provenancePermissions,omitempty"`
            // CountersPermissions - Permissions for accessing counters.
            CountersPermissions *PermissionsDTO `json:"countersPermissions,omitempty"`
            // TenantsPermissions - Permissions for accessing tenants.
            TenantsPermissions *PermissionsDTO `json:"tenantsPermissions,omitempty"`
            // ControllerPermissions - Permissions for accessing the controller.
            ControllerPermissions *PermissionsDTO `json:"controllerPermissions,omitempty"`
            // PoliciesPermissions - Permissions for accessing the policies.
            PoliciesPermissions *PermissionsDTO `json:"policiesPermissions,omitempty"`
            }

            // DimensionsDTO ...
            type DimensionsDTO struct {
            // Width - The width of the label in pixels when at a 1:1 scale.
            Width *float64 `json:"width,omitempty"`
            // Height - The height of the label in pixels when at a 1:1 scale.
            Height *float64 `json:"height,omitempty"`
            }

            // DocumentedTypeDTO ...
            type DocumentedTypeDTO struct {
            // Type - The fulley qualified name of the type.
            Type *string `json:"type,omitempty"`
            // Description - The description of the type.
            Description *string `json:"description,omitempty"`
            // Tags - The tags associated with this type.
            Tags *[]string `json:"tags,omitempty"`
            }

            // DropRequestDTO ...
            type DropRequestDTO struct {
            // ID - The id for this drop request.
            ID *string `json:"id,omitempty"`
            // URI - The URI for future requests to this drop request.
            URI *string `json:"uri,omitempty"`
            // SubmissionTime - The timestamp when the query was submitted.
            SubmissionTime *string `json:"submissionTime,omitempty"`
            // LastUpdated - The last time this drop request was updated.
            LastUpdated *string `json:"lastUpdated,omitempty"`
            // PercentCompleted - The current percent complete.
            PercentCompleted *int32 `json:"percentCompleted,omitempty"`
            // Finished - Whether the query has finished.
            Finished *bool `json:"finished,omitempty"`
            // FailureReason - The reason, if any, that this drop request failed.
            FailureReason *string `json:"failureReason,omitempty"`
            // CurrentCount - The number of flow files currently queued.
            CurrentCount *int32 `json:"currentCount,omitempty"`
            // CurrentSize - The size of flow files currently queued in bytes.
            CurrentSize *int64 `json:"currentSize,omitempty"`
            // Current - The count and size of flow files currently queued.
            Current *string `json:"current,omitempty"`
            // OriginalCount - The number of flow files to be dropped as a result of this request.
            OriginalCount *int32 `json:"originalCount,omitempty"`
            // OriginalSize - The size of flow files to be dropped as a result of this request in bytes.
            OriginalSize *int64 `json:"originalSize,omitempty"`
            // Original - The count and size of flow files to be dropped as a result of this request.
            Original *string `json:"original,omitempty"`
            // DroppedCount - The number of flow files that have been dropped thus far.
            DroppedCount *int32 `json:"droppedCount,omitempty"`
            // DroppedSize - The size of flow files that have been dropped thus far in bytes.
            DroppedSize *int64 `json:"droppedSize,omitempty"`
            // Dropped - The count and size of flow files that have been dropped thus far.
            Dropped *string `json:"dropped,omitempty"`
            // State - The current state of the drop request.
            State *string `json:"state,omitempty"`
            }

            // DropRequestEntity ...
            type DropRequestEntity struct {
            autorest.Response `json:"-"`
            DropRequest *DropRequestDTO `json:"dropRequest,omitempty"`
            }

            // FlowBreadcrumbDTO ...
            type FlowBreadcrumbDTO struct {
            // ID - The id of the group.
            ID *string `json:"id,omitempty"`
            // Name - The id of the group.
            Name *string `json:"name,omitempty"`
            }

            // FlowBreadcrumbEntity ...
            type FlowBreadcrumbEntity struct {
            // ID - The id of this ancestor ProcessGroup.
            ID *string `json:"id,omitempty"`
            // Permissions - The permissions for this ancestor ProcessGroup.
            Permissions *PermissionsDTO `json:"permissions,omitempty"`
            // Breadcrumb - This breadcrumb.
            Breadcrumb *FlowBreadcrumbDTO `json:"breadcrumb,omitempty"`
            }

            // FlowConfigurationDTO ...
            type FlowConfigurationDTO struct {
            // SupportsConfigurableAuthorizer - Whether this NiFi supports a configurable authorizer.
            SupportsConfigurableAuthorizer *bool `json:"supportsConfigurableAuthorizer,omitempty"`
            // AutoRefreshIntervalSeconds - The interval in seconds between the automatic NiFi refresh requests.
            AutoRefreshIntervalSeconds *int64 `json:"autoRefreshIntervalSeconds,omitempty"`
            // CurrentTime - The current time on the system.
            CurrentTime *string `json:"currentTime,omitempty"`
            // TimeOffset - The time offset of the system.
            TimeOffset *int32 `json:"timeOffset,omitempty"`
            }

            // FlowConfigurationEntity ...
            type FlowConfigurationEntity struct {
            autorest.Response `json:"-"`
            // FlowConfiguration - The controller configuration.
            FlowConfiguration *FlowConfigurationDTO `json:"flowConfiguration,omitempty"`
            }

            // FlowDTO ...
            type FlowDTO struct {
            // ProcessGroups - The process groups in this flow.
            ProcessGroups *[]ProcessGroupEntity `json:"processGroups,omitempty"`
            // RemoteProcessGroups - The remote process groups in this flow.
            RemoteProcessGroups *[]RemoteProcessGroupEntity `json:"remoteProcessGroups,omitempty"`
            // Processors - The processors in this flow.
            Processors *[]ProcessorEntity `json:"processors,omitempty"`
            // InputPorts - The input ports in this flow.
            InputPorts *[]PortEntity `json:"inputPorts,omitempty"`
            // OutputPorts - The output ports in this flow.
            OutputPorts *[]PortEntity `json:"outputPorts,omitempty"`
            // Connections - The connections in this flow.
            Connections *[]ConnectionEntity `json:"connections,omitempty"`
            // Labels - The labels in this flow.
            Labels *[]LabelEntity `json:"labels,omitempty"`
            // Funnels - The funnels in this flow.
            Funnels *[]FunnelEntity `json:"funnels,omitempty"`
            }

            // FlowEntity ...
            type FlowEntity struct {
            autorest.Response `json:"-"`
            Flow *FlowDTO `json:"flow,omitempty"`
            }

            // FlowFileSummaryDTO ...
            type FlowFileSummaryDTO struct {
            // URI - The URI that can be used to access this FlowFile.
            URI *string `json:"uri,omitempty"`
            // UUID - The FlowFile UUID.
            UUID *string `json:"uuid,omitempty"`
            // Filename - The FlowFile filename.
            Filename *string `json:"filename,omitempty"`
            // Position - The FlowFile's position in the queue.
            Position *int32 `json:"position,omitempty"`
            // Size - The FlowFile file size.
            Size *int64 `json:"size,omitempty"`
            // QueuedDuration - How long this FlowFile has been enqueued.
            QueuedDuration *int64 `json:"queuedDuration,omitempty"`
            // LineageDuration - Duration since the FlowFile's greatest ancestor entered the flow.
            LineageDuration *int64 `json:"lineageDuration,omitempty"`
            // ClusterNodeID - The id of the node where this FlowFile resides.
            ClusterNodeID *string `json:"clusterNodeId,omitempty"`
            // ClusterNodeAddress - The label for the node where this FlowFile resides.
            ClusterNodeAddress *string `json:"clusterNodeAddress,omitempty"`
            // Penalized - If the FlowFile is penalized.
            Penalized *bool `json:"penalized,omitempty"`
            }

            // FlowSnippetDTO ...
            type FlowSnippetDTO struct {
            // ProcessGroups - The process groups in this flow snippet.
            ProcessGroups *[]ProcessGroupDTO `json:"processGroups,omitempty"`
            // RemoteProcessGroups - The remote process groups in this flow snippet.
            RemoteProcessGroups *[]RemoteProcessGroupDTO `json:"remoteProcessGroups,omitempty"`
            // Processors - The processors in this flow snippet.
            Processors *[]ProcessorDTO `json:"processors,omitempty"`
            // InputPorts - The input ports in this flow snippet.
            InputPorts *[]PortDTO `json:"inputPorts,omitempty"`
            // OutputPorts - The output ports in this flow snippet.
            OutputPorts *[]PortDTO `json:"outputPorts,omitempty"`
            // Connections - The connections in this flow snippet.
            Connections *[]ConnectionDTO `json:"connections,omitempty"`
            // Labels - The labels in this flow snippet.
            Labels *[]LabelDTO `json:"labels,omitempty"`
            // Funnels - The funnels in this flow snippet.
            Funnels *[]FunnelDTO `json:"funnels,omitempty"`
            // ControllerServices - The controller services in this flow snippet.
            ControllerServices *[]ControllerServiceDTO `json:"controllerServices,omitempty"`
            }

            // FlowSnippetEntity ...
            type FlowSnippetEntity struct {
            autorest.Response `json:"-"`
            Contents *FlowSnippetDTO `json:"contents,omitempty"`
            }

            // FunnelDTO ...
            type FunnelDTO struct {
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // ParentGroupID - The id of parent process group of this component if applicable.
            ParentGroupID *string `json:"parentGroupId,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            }

            // FunnelEntity ...
            type FunnelEntity struct {
            autorest.Response `json:"-"`
            // Revision - The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.
            Revision *RevisionDTO `json:"revision,omitempty"`
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // URI - The URI for futures requests to the component.
            URI *string `json:"uri,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            // Permissions - The permissions for this component.
            Permissions *PermissionsDTO `json:"permissions,omitempty"`
            // Bulletins - The bulletins for this component.
            Bulletins *[]BulletinEntity `json:"bulletins,omitempty"`
            Component *FunnelDTO `json:"component,omitempty"`
            }

            // FunnelsEntity ...
            type FunnelsEntity struct {
            autorest.Response `json:"-"`
            Funnels *[]FunnelEntity `json:"funnels,omitempty"`
            }

            // GarbageCollectionDTO ...
            type GarbageCollectionDTO struct {
            // Name - The name of the garbage collector.
            Name *string `json:"name,omitempty"`
            // CollectionCount - The number of times garbage collection has run.
            CollectionCount *int64 `json:"collectionCount,omitempty"`
            // CollectionTime - The total amount of time spent garbage collecting.
            CollectionTime *string `json:"collectionTime,omitempty"`
            // CollectionMillis - The total number of milliseconds spent garbage collecting.
            CollectionMillis *int64 `json:"collectionMillis,omitempty"`
            }

            // HistoryDTO ...
            type HistoryDTO struct {
            // Total - The number of number of actions that matched the search criteria..
            Total *int32 `json:"total,omitempty"`
            // LastRefreshed - The timestamp when the report was generated.
            LastRefreshed *string `json:"lastRefreshed,omitempty"`
            // Actions - The actions.
            Actions *[]ActionEntity `json:"actions,omitempty"`
            }

            // HistoryEntity ...
            type HistoryEntity struct {
            autorest.Response `json:"-"`
            History *HistoryDTO `json:"history,omitempty"`
            }

            // InputPortsEntity ...
            type InputPortsEntity struct {
            autorest.Response `json:"-"`
            InputPorts *[]PortEntity `json:"inputPorts,omitempty"`
            }

            // InstantiateTemplateRequestEntity ...
            type InstantiateTemplateRequestEntity struct {
            // TemplateID - The identifier of the template.
            TemplateID *string `json:"templateId,omitempty"`
            // OriginX - The x coordinate of the origin of the bounding box where the new components will be placed.
            OriginX *float64 `json:"originX,omitempty"`
            // OriginY - The y coordinate of the origin of the bounding box where the new components will be placed.
            OriginY *float64 `json:"originY,omitempty"`
            }

            // LabelDTO ...
            type LabelDTO struct {
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // ParentGroupID - The id of parent process group of this component if applicable.
            ParentGroupID *string `json:"parentGroupId,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            // Label - The text that appears in the label.
            Label *string `json:"label,omitempty"`
            // Width - The width of the label in pixels when at a 1:1 scale.
            Width *float64 `json:"width,omitempty"`
            // Height - The height of the label in pixels when at a 1:1 scale.
            Height *float64 `json:"height,omitempty"`
            // Style - The styles for this label (font-size => 12px, background-color => #eee, etc).
            Style map[string]*string `json:"style"`
            }

        // MarshalJSON is the custom marshaler for LabelDTO.
        func (ld LabelDTO)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(ld.ID != nil) {
                objectMap["id"] = ld.ID
                }
                if(ld.ParentGroupID != nil) {
                objectMap["parentGroupId"] = ld.ParentGroupID
                }
                if(ld.Position != nil) {
                objectMap["position"] = ld.Position
                }
                if(ld.Label != nil) {
                objectMap["label"] = ld.Label
                }
                if(ld.Width != nil) {
                objectMap["width"] = ld.Width
                }
                if(ld.Height != nil) {
                objectMap["height"] = ld.Height
                }
                if(ld.Style != nil) {
                objectMap["style"] = ld.Style
                }
                return json.Marshal(objectMap)
        }

            // LabelEntity ...
            type LabelEntity struct {
            autorest.Response `json:"-"`
            // Revision - The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.
            Revision *RevisionDTO `json:"revision,omitempty"`
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // URI - The URI for futures requests to the component.
            URI *string `json:"uri,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            // Permissions - The permissions for this component.
            Permissions *PermissionsDTO `json:"permissions,omitempty"`
            // Bulletins - The bulletins for this component.
            Bulletins *[]BulletinEntity `json:"bulletins,omitempty"`
            Dimensions *DimensionsDTO `json:"dimensions,omitempty"`
            Component *LabelDTO `json:"component,omitempty"`
            }

            // LabelsEntity ...
            type LabelsEntity struct {
            autorest.Response `json:"-"`
            Labels *[]LabelEntity `json:"labels,omitempty"`
            }

            // LineageDTO ...
            type LineageDTO struct {
            // ID - The id of this lineage query.
            ID *string `json:"id,omitempty"`
            // URI - The URI for this lineage query for later retrieval and deletion.
            URI *string `json:"uri,omitempty"`
            // SubmissionTime - When the lineage query was submitted.
            SubmissionTime *string `json:"submissionTime,omitempty"`
            // Expiration - When the lineage query will expire.
            Expiration *string `json:"expiration,omitempty"`
            // PercentCompleted - The percent complete for the lineage query.
            PercentCompleted *int32 `json:"percentCompleted,omitempty"`
            // Finished - Whether the lineage query has finished.
            Finished *bool `json:"finished,omitempty"`
            // Request - The initial lineage result.
            Request *LineageRequestDTO `json:"request,omitempty"`
            // Results - The results of the lineage query.
            Results *LineageResultsDTO `json:"results,omitempty"`
            }

            // LineageEntity ...
            type LineageEntity struct {
            autorest.Response `json:"-"`
            Lineage *LineageDTO `json:"lineage,omitempty"`
            }

            // LineageRequestDTO ...
            type LineageRequestDTO struct {
            EventID *int64 `json:"eventId,omitempty"`
            // LineageRequestType - The type of lineage request. PARENTS will return the lineage for the flowfiles that are parents of the specified event. CHILDREN will return the lineage for the flowfiles that are children of the specified event. FLOWFILE will return the lineage for the specified flowfile. Possible values include: 'PARENTS', 'CHILDREN', 'FLOWFILE', 'AndFLOWFILE'
            LineageRequestType LineageRequestType `json:"lineageRequestType,omitempty"`
            // UUID - The uuid that was used to generate the lineage.
            UUID *string `json:"uuid,omitempty"`
            // ClusterNodeID - The id of the node where this lineage originated if clustered.
            ClusterNodeID *string `json:"clusterNodeId,omitempty"`
            }

            // LineageResultsDTO ...
            type LineageResultsDTO struct {
            // Errors - Any errors that occurred while generating the lineage.
            Errors *[]string `json:"errors,omitempty"`
            // Nodes - The nodes in the lineage.
            Nodes *[]ProvenanceNodeDTO `json:"nodes,omitempty"`
            // Links - The links between the nodes in the lineage.
            Links *[]ProvenanceLinkDTO `json:"links,omitempty"`
            }

            // ListingRequestDTO ...
            type ListingRequestDTO struct {
            // ID - The id for this listing request.
            ID *string `json:"id,omitempty"`
            // URI - The URI for future requests to this listing request.
            URI *string `json:"uri,omitempty"`
            // SubmissionTime - The timestamp when the query was submitted.
            SubmissionTime *string `json:"submissionTime,omitempty"`
            // LastUpdated - The last time this listing request was updated.
            LastUpdated *string `json:"lastUpdated,omitempty"`
            // PercentCompleted - The current percent complete.
            PercentCompleted *int32 `json:"percentCompleted,omitempty"`
            // Finished - Whether the query has finished.
            Finished *bool `json:"finished,omitempty"`
            // FailureReason - The reason, if any, that this listing request failed.
            FailureReason *string `json:"failureReason,omitempty"`
            // MaxResults - The maximum number of FlowFileSummary objects to return
            MaxResults *int32 `json:"maxResults,omitempty"`
            // State - The current state of the listing request.
            State *string `json:"state,omitempty"`
            // QueueSize - The size of the queue
            QueueSize *QueueSizeDTO `json:"queueSize,omitempty"`
            // FlowFileSummaries - The FlowFile summaries. The summaries will be populated once the request has completed.
            FlowFileSummaries *[]FlowFileSummaryDTO `json:"flowFileSummaries,omitempty"`
            // SourceRunning - Whether the source of the connection is running
            SourceRunning *bool `json:"sourceRunning,omitempty"`
            // DestinationRunning - Whether the destination of the connection is running
            DestinationRunning *bool `json:"destinationRunning,omitempty"`
            }

            // ListingRequestEntity ...
            type ListingRequestEntity struct {
            autorest.Response `json:"-"`
            ListingRequest *ListingRequestDTO `json:"listingRequest,omitempty"`
            }

            // NodeConnectionStatusSnapshotDTO ...
            type NodeConnectionStatusSnapshotDTO struct {
            // NodeID - The unique ID that identifies the node
            NodeID *string `json:"nodeId,omitempty"`
            // Address - The API address of the node
            Address *string `json:"address,omitempty"`
            // APIPort - The API port used to communicate with the node
            APIPort *int32 `json:"apiPort,omitempty"`
            // StatusSnapshot - The connection status snapshot from the node.
            StatusSnapshot *ConnectionStatusSnapshotDTO `json:"statusSnapshot,omitempty"`
            }

            // NodeCountersSnapshotDTO ...
            type NodeCountersSnapshotDTO struct {
            // NodeID - The unique ID that identifies the node
            NodeID *string `json:"nodeId,omitempty"`
            // Address - The API address of the node
            Address *string `json:"address,omitempty"`
            // APIPort - The API port used to communicate with the node
            APIPort *int32 `json:"apiPort,omitempty"`
            // Snapshot - The counters from the node.
            Snapshot *CountersSnapshotDTO `json:"snapshot,omitempty"`
            }

            // NodeDTO ...
            type NodeDTO struct {
            // NodeID - The id of the node.
            NodeID *string `json:"nodeId,omitempty"`
            // Address - The node's host/ip address.
            Address *string `json:"address,omitempty"`
            // APIPort - The port the node is listening for API requests.
            APIPort *int32 `json:"apiPort,omitempty"`
            // Status - The node's status.
            Status *string `json:"status,omitempty"`
            // Heartbeat - the time of the nodes's last heartbeat.
            Heartbeat *string `json:"heartbeat,omitempty"`
            // ConnectionRequested - The time of the node's last connection request.
            ConnectionRequested *string `json:"connectionRequested,omitempty"`
            // Roles - The roles of this node.
            Roles *[]string `json:"roles,omitempty"`
            // ActiveThreadCount - The active threads for the NiFi on the node.
            ActiveThreadCount *int32 `json:"activeThreadCount,omitempty"`
            // Queued - The queue the NiFi on the node.
            Queued *string `json:"queued,omitempty"`
            // Events - The node's events.
            Events *[]NodeEventDTO `json:"events,omitempty"`
            // NodeStartTime - The time at which this Node was last refreshed.
            NodeStartTime *string `json:"nodeStartTime,omitempty"`
            }

            // NodeEntity ...
            type NodeEntity struct {
            autorest.Response `json:"-"`
            Node *NodeDTO `json:"node,omitempty"`
            }

            // NodeEventDTO ...
            type NodeEventDTO struct {
            // Timestamp - The timestamp of the node event.
            Timestamp *string `json:"timestamp,omitempty"`
            // Category - The category of the node event.
            Category *string `json:"category,omitempty"`
            // Message - The message in the node event.
            Message *string `json:"message,omitempty"`
            }

            // NodePortStatusSnapshotDTO ...
            type NodePortStatusSnapshotDTO struct {
            // NodeID - The unique ID that identifies the node
            NodeID *string `json:"nodeId,omitempty"`
            // Address - The API address of the node
            Address *string `json:"address,omitempty"`
            // APIPort - The API port used to communicate with the node
            APIPort *int32 `json:"apiPort,omitempty"`
            // StatusSnapshot - The port status snapshot from the node.
            StatusSnapshot *PortStatusSnapshotDTO `json:"statusSnapshot,omitempty"`
            }

            // NodeProcessGroupStatusSnapshotDTO ...
            type NodeProcessGroupStatusSnapshotDTO struct {
            // NodeID - The unique ID that identifies the node
            NodeID *string `json:"nodeId,omitempty"`
            // Address - The API address of the node
            Address *string `json:"address,omitempty"`
            // APIPort - The API port used to communicate with the node
            APIPort *int32 `json:"apiPort,omitempty"`
            // StatusSnapshot - The process group status snapshot from the node.
            StatusSnapshot *ProcessGroupStatusSnapshotDTO `json:"statusSnapshot,omitempty"`
            }

            // NodeProcessorStatusSnapshotDTO ...
            type NodeProcessorStatusSnapshotDTO struct {
            // NodeID - The unique ID that identifies the node
            NodeID *string `json:"nodeId,omitempty"`
            // Address - The API address of the node
            Address *string `json:"address,omitempty"`
            // APIPort - The API port used to communicate with the node
            APIPort *int32 `json:"apiPort,omitempty"`
            // StatusSnapshot - The processor status snapshot from the node.
            StatusSnapshot *ProcessorStatusSnapshotDTO `json:"statusSnapshot,omitempty"`
            }

            // NodeRemoteProcessGroupStatusSnapshotDTO ...
            type NodeRemoteProcessGroupStatusSnapshotDTO struct {
            // NodeID - The unique ID that identifies the node
            NodeID *string `json:"nodeId,omitempty"`
            // Address - The API address of the node
            Address *string `json:"address,omitempty"`
            // APIPort - The API port used to communicate with the node
            APIPort *int32 `json:"apiPort,omitempty"`
            // StatusSnapshot - The remote process group status snapshot from the node.
            StatusSnapshot *RemoteProcessGroupStatusSnapshotDTO `json:"statusSnapshot,omitempty"`
            }

            // NodeSearchResultDTO ...
            type NodeSearchResultDTO struct {
            // ID - The id of the node that matched the search.
            ID *string `json:"id,omitempty"`
            // Address - The address of the node that matched the search.
            Address *string `json:"address,omitempty"`
            }

            // NodeStatusSnapshotsDTO ...
            type NodeStatusSnapshotsDTO struct {
            // NodeID - The id of the node.
            NodeID *string `json:"nodeId,omitempty"`
            // Address - The node's host/ip address.
            Address *string `json:"address,omitempty"`
            // APIPort - The port the node is listening for API requests.
            APIPort *int32 `json:"apiPort,omitempty"`
            // StatusSnapshots - A list of StatusSnapshotDTO objects that provide the actual metric values for the component for this node.
            StatusSnapshots *[]StatusSnapshotDTO `json:"statusSnapshots,omitempty"`
            }

            // NodeSystemDiagnosticsSnapshotDTO ...
            type NodeSystemDiagnosticsSnapshotDTO struct {
            // NodeID - The unique ID that identifies the node
            NodeID *string `json:"nodeId,omitempty"`
            // Address - The API address of the node
            Address *string `json:"address,omitempty"`
            // APIPort - The API port used to communicate with the node
            APIPort *int32 `json:"apiPort,omitempty"`
            // Snapshot - The System Diagnostics snapshot from the node.
            Snapshot *SystemDiagnosticsSnapshotDTO `json:"snapshot,omitempty"`
            }

            // OutputPortsEntity ...
            type OutputPortsEntity struct {
            autorest.Response `json:"-"`
            OutputPorts *[]PortEntity `json:"outputPorts,omitempty"`
            }

            // PeerDTO ...
            type PeerDTO struct {
            // Hostname - The hostname of this peer.
            Hostname *string `json:"hostname,omitempty"`
            // Port - The port number of this peer.
            Port *int32 `json:"port,omitempty"`
            // Secure - Returns if this peer connection is secure.
            Secure *bool `json:"secure,omitempty"`
            // FlowFileCount - The number of flowFiles this peer holds.
            FlowFileCount *int32 `json:"flowFileCount,omitempty"`
            }

            // PeersEntity ...
            type PeersEntity struct {
            autorest.Response `json:"-"`
            Peers *[]PeerDTO `json:"peers,omitempty"`
            }

            // PermissionsDTO ...
            type PermissionsDTO struct {
            // CanRead - Indicates whether the user can read a given resource.
            CanRead *bool `json:"canRead,omitempty"`
            // CanWrite - Indicates whether the user can write a given resource.
            CanWrite *bool `json:"canWrite,omitempty"`
            }

            // PortDTO ...
            type PortDTO struct {
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // ParentGroupID - The id of parent process group of this component if applicable.
            ParentGroupID *string `json:"parentGroupId,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            // Name - The name of the port.
            Name *string `json:"name,omitempty"`
            // Comments - The comments for the port.
            Comments *string `json:"comments,omitempty"`
            // State - The state of the port. Possible values include: 'StateRUNNING', 'StateSTOPPED', 'StateDISABLED'
            State State `json:"state,omitempty"`
            // Type - The type of port. Possible values include: 'Type1INPUTPORT', 'Type1OUTPUTPORT'
            Type Type1 `json:"type,omitempty"`
            // Transmitting - Whether the port has incoming or output connections to a remote NiFi. This is only applicable when the port is running in the root group.
            Transmitting *bool `json:"transmitting,omitempty"`
            // ConcurrentlySchedulableTaskCount - The number of tasks that should be concurrently scheduled for the port.
            ConcurrentlySchedulableTaskCount *int32 `json:"concurrentlySchedulableTaskCount,omitempty"`
            // UserAccessControl - The users that are allowed to access the port.
            UserAccessControl *[]string `json:"userAccessControl,omitempty"`
            // GroupAccessControl - The user groups that are allowed to access the port.
            GroupAccessControl *[]string `json:"groupAccessControl,omitempty"`
            // ValidationErrors - Gets the validation errors from this port. These validation errors represent the problems with the port that must be resolved before it can be started.
            ValidationErrors *[]string `json:"validationErrors,omitempty"`
            }

            // PortEntity ...
            type PortEntity struct {
            autorest.Response `json:"-"`
            // Revision - The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.
            Revision *RevisionDTO `json:"revision,omitempty"`
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // URI - The URI for futures requests to the component.
            URI *string `json:"uri,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            // Permissions - The permissions for this component.
            Permissions *PermissionsDTO `json:"permissions,omitempty"`
            // Bulletins - The bulletins for this component.
            Bulletins *[]BulletinEntity `json:"bulletins,omitempty"`
            Component *PortDTO `json:"component,omitempty"`
            // Status - The status of the port.
            Status *PortStatusDTO `json:"status,omitempty"`
            PortType *string `json:"portType,omitempty"`
            }

            // PortStatusDTO ...
            type PortStatusDTO struct {
            // ID - The id of the port.
            ID *string `json:"id,omitempty"`
            // GroupID - The id of the parent process group of the port.
            GroupID *string `json:"groupId,omitempty"`
            // Name - The name of the port.
            Name *string `json:"name,omitempty"`
            // Transmitting - Whether the port has incoming or outgoing connections to a remote NiFi.
            Transmitting *bool `json:"transmitting,omitempty"`
            // RunStatus - The run status of the port.
            RunStatus *string `json:"runStatus,omitempty"`
            // StatsLastRefreshed - The time the status for the process group was last refreshed.
            StatsLastRefreshed *string `json:"statsLastRefreshed,omitempty"`
            // AggregateSnapshot - A status snapshot that represents the aggregate stats of all nodes in the cluster. If the NiFi instance is a standalone instance, rather than a cluster, this represents the stats of the single instance.
            AggregateSnapshot *PortStatusSnapshotDTO `json:"aggregateSnapshot,omitempty"`
            // NodeSnapshots - A status snapshot for each node in the cluster. If the NiFi instance is a standalone instance, rather than a cluster, this may be null.
            NodeSnapshots *[]NodePortStatusSnapshotDTO `json:"nodeSnapshots,omitempty"`
            }

            // PortStatusEntity ...
            type PortStatusEntity struct {
            autorest.Response `json:"-"`
            PortStatus *PortStatusDTO `json:"portStatus,omitempty"`
            // CanRead - Indicates whether the user can read a given resource.
            CanRead *bool `json:"canRead,omitempty"`
            }

            // PortStatusSnapshotDTO ...
            type PortStatusSnapshotDTO struct {
            // ID - The id of the port.
            ID *string `json:"id,omitempty"`
            // GroupID - The id of the parent process group of the port.
            GroupID *string `json:"groupId,omitempty"`
            // Name - The name of the port.
            Name *string `json:"name,omitempty"`
            // ActiveThreadCount - The active thread count for the port.
            ActiveThreadCount *int32 `json:"activeThreadCount,omitempty"`
            // FlowFilesIn - The number of FlowFiles that have been accepted in the last 5 minutes.
            FlowFilesIn *int32 `json:"flowFilesIn,omitempty"`
            // BytesIn - The size of hte FlowFiles that have been accepted in the last 5 minutes.
            BytesIn *int64 `json:"bytesIn,omitempty"`
            // Input - The count/size of flowfiles that have been accepted in the last 5 minutes.
            Input *string `json:"input,omitempty"`
            // FlowFilesOut - The number of FlowFiles that have been processed in the last 5 minutes.
            FlowFilesOut *int32 `json:"flowFilesOut,omitempty"`
            // BytesOut - The number of bytes that have been processed in the last 5 minutes.
            BytesOut *int64 `json:"bytesOut,omitempty"`
            // Output - The count/size of flowfiles that have been processed in the last 5 minutes.
            Output *string `json:"output,omitempty"`
            // Transmitting - Whether the port has incoming or outgoing connections to a remote NiFi.
            Transmitting *bool `json:"transmitting,omitempty"`
            // RunStatus - The run status of the port.
            RunStatus *string `json:"runStatus,omitempty"`
            }

            // PortStatusSnapshotEntity ...
            type PortStatusSnapshotEntity struct {
            // ID - The id of the port.
            ID *string `json:"id,omitempty"`
            PortStatusSnapshot *PortStatusSnapshotDTO `json:"portStatusSnapshot,omitempty"`
            // CanRead - Indicates whether the user can read a given resource.
            CanRead *bool `json:"canRead,omitempty"`
            }

            // PositionDTO ...
            type PositionDTO struct {
            // X - The x coordinate.
            X *float64 `json:"x,omitempty"`
            // Y - The y coordinate.
            Y *float64 `json:"y,omitempty"`
            }

            // PreviousValueDTO ...
            type PreviousValueDTO struct {
            // PreviousValue - The previous value.
            PreviousValue *string `json:"previousValue,omitempty"`
            // Timestamp - The timestamp when the value was modified.
            Timestamp *string `json:"timestamp,omitempty"`
            // UserIdentity - The user who changed the previous value.
            UserIdentity *string `json:"userIdentity,omitempty"`
            }

            // PrioritizerTypesEntity ...
            type PrioritizerTypesEntity struct {
            autorest.Response `json:"-"`
            PrioritizerTypes *[]DocumentedTypeDTO `json:"prioritizerTypes,omitempty"`
            }

            // ProcessGroupDTO ...
            type ProcessGroupDTO struct {
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // ParentGroupID - The id of parent process group of this component if applicable.
            ParentGroupID *string `json:"parentGroupId,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            // Name - The name of the process group.
            Name *string `json:"name,omitempty"`
            // Comments - The comments for the process group.
            Comments *string `json:"comments,omitempty"`
            // RunningCount - The number of running componetns in this process group.
            RunningCount *int32 `json:"runningCount,omitempty"`
            // StoppedCount - The number of stopped components in the process group.
            StoppedCount *int32 `json:"stoppedCount,omitempty"`
            // InvalidCount - The number of invalid components in the process group.
            InvalidCount *int32 `json:"invalidCount,omitempty"`
            // DisabledCount - The number of disabled components in the process group.
            DisabledCount *int32 `json:"disabledCount,omitempty"`
            // ActiveRemotePortCount - The number of active remote ports in the process group.
            ActiveRemotePortCount *int32 `json:"activeRemotePortCount,omitempty"`
            // InactiveRemotePortCount - The number of inactive remote ports in the process group.
            InactiveRemotePortCount *int32 `json:"inactiveRemotePortCount,omitempty"`
            // InputPortCount - The number of input ports in the process group.
            InputPortCount *int32 `json:"inputPortCount,omitempty"`
            // OutputPortCount - The number of output ports in the process group.
            OutputPortCount *int32 `json:"outputPortCount,omitempty"`
            }

            // ProcessGroupEntity ...
            type ProcessGroupEntity struct {
            autorest.Response `json:"-"`
            // Revision - The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.
            Revision *RevisionDTO `json:"revision,omitempty"`
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // URI - The URI for futures requests to the component.
            URI *string `json:"uri,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            // Permissions - The permissions for this component.
            Permissions *PermissionsDTO `json:"permissions,omitempty"`
            // Bulletins - The bulletins for this component.
            Bulletins *[]BulletinEntity `json:"bulletins,omitempty"`
            Component *ProcessGroupDTO `json:"component,omitempty"`
            // Status - The status of the process group.
            Status *ProcessGroupStatusDTO `json:"status,omitempty"`
            // RunningCount - The number of running componetns in this process group.
            RunningCount *int32 `json:"runningCount,omitempty"`
            // StoppedCount - The number of stopped components in the process group.
            StoppedCount *int32 `json:"stoppedCount,omitempty"`
            // InvalidCount - The number of invalid components in the process group.
            InvalidCount *int32 `json:"invalidCount,omitempty"`
            // DisabledCount - The number of disabled components in the process group.
            DisabledCount *int32 `json:"disabledCount,omitempty"`
            // ActiveRemotePortCount - The number of active remote ports in the process group.
            ActiveRemotePortCount *int32 `json:"activeRemotePortCount,omitempty"`
            // InactiveRemotePortCount - The number of inactive remote ports in the process group.
            InactiveRemotePortCount *int32 `json:"inactiveRemotePortCount,omitempty"`
            // InputPortCount - The number of input ports in the process group.
            InputPortCount *int32 `json:"inputPortCount,omitempty"`
            // OutputPortCount - The number of output ports in the process group.
            OutputPortCount *int32 `json:"outputPortCount,omitempty"`
            }

            // ProcessGroupFlowDTO ...
            type ProcessGroupFlowDTO struct {
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // URI - The URI for futures requests to the component.
            URI *string `json:"uri,omitempty"`
            // ParentGroupID - The id of parent process group of this component if applicable.
            ParentGroupID *string `json:"parentGroupId,omitempty"`
            // Breadcrumb - The breadcrumb of the process group.
            Breadcrumb *FlowBreadcrumbEntity `json:"breadcrumb,omitempty"`
            // Flow - The flow structure starting at this Process Group.
            Flow *FlowDTO `json:"flow,omitempty"`
            // LastRefreshed - The time the flow for the process group was last refreshed.
            LastRefreshed *string `json:"lastRefreshed,omitempty"`
            }

            // ProcessGroupFlowEntity ...
            type ProcessGroupFlowEntity struct {
            autorest.Response `json:"-"`
            // Permissions - The access policy for this process group.
            Permissions *PermissionsDTO `json:"permissions,omitempty"`
            ProcessGroupFlow *ProcessGroupFlowDTO `json:"processGroupFlow,omitempty"`
            }

            // ProcessGroupStatusDTO ...
            type ProcessGroupStatusDTO struct {
            // ID - The ID of the Process Group
            ID *string `json:"id,omitempty"`
            // Name - The name of the Process Group
            Name *string `json:"name,omitempty"`
            // StatsLastRefreshed - The time the status for the process group was last refreshed.
            StatsLastRefreshed *string `json:"statsLastRefreshed,omitempty"`
            // AggregateSnapshot - The aggregate status of all nodes in the cluster
            AggregateSnapshot *ProcessGroupStatusSnapshotDTO `json:"aggregateSnapshot,omitempty"`
            // NodeSnapshots - The status reported by each node in the cluster. If the NiFi instance is a standalone instance, rather than a clustered instance, this value may be null.
            NodeSnapshots *[]NodeProcessGroupStatusSnapshotDTO `json:"nodeSnapshots,omitempty"`
            }

            // ProcessGroupStatusEntity ...
            type ProcessGroupStatusEntity struct {
            autorest.Response `json:"-"`
            ProcessGroupStatus *ProcessGroupStatusDTO `json:"processGroupStatus,omitempty"`
            // CanRead - Indicates whether the user can read a given resource.
            CanRead *bool `json:"canRead,omitempty"`
            }

            // ProcessGroupStatusSnapshotDTO ...
            type ProcessGroupStatusSnapshotDTO struct {
            // ID - The id of the process group.
            ID *string `json:"id,omitempty"`
            // Name - The name of this process group.
            Name *string `json:"name,omitempty"`
            // ConnectionStatusSnapshots - The status of all conenctions in the process group.
            ConnectionStatusSnapshots *[]ConnectionStatusSnapshotEntity `json:"connectionStatusSnapshots,omitempty"`
            // ProcessorStatusSnapshots - The status of all processors in the process group.
            ProcessorStatusSnapshots *[]ProcessorStatusSnapshotEntity `json:"processorStatusSnapshots,omitempty"`
            // ProcessGroupStatusSnapshots - The status of all process groups in the process group.
            ProcessGroupStatusSnapshots *[]ProcessGroupStatusSnapshotEntity `json:"processGroupStatusSnapshots,omitempty"`
            // RemoteProcessGroupStatusSnapshots - The status of all remote process groups in the process group.
            RemoteProcessGroupStatusSnapshots *[]RemoteProcessGroupStatusSnapshotEntity `json:"remoteProcessGroupStatusSnapshots,omitempty"`
            // InputPortStatusSnapshots - The status of all input ports in the process group.
            InputPortStatusSnapshots *[]PortStatusSnapshotEntity `json:"inputPortStatusSnapshots,omitempty"`
            // OutputPortStatusSnapshots - The status of all output ports in the process group.
            OutputPortStatusSnapshots *[]PortStatusSnapshotEntity `json:"outputPortStatusSnapshots,omitempty"`
            // FlowFilesIn - The number of FlowFiles that have come into this ProcessGroup in the last 5 minutes
            FlowFilesIn *int32 `json:"flowFilesIn,omitempty"`
            // BytesIn - The number of bytes that have come into this ProcessGroup in the last 5 minutes
            BytesIn *int64 `json:"bytesIn,omitempty"`
            // Input - The input count/size for the process group in the last 5 minutes (pretty printed).
            Input *string `json:"input,omitempty"`
            // FlowFilesQueued - The number of FlowFiles that are queued up in this ProcessGroup right now
            FlowFilesQueued *int32 `json:"flowFilesQueued,omitempty"`
            // BytesQueued - The number of bytes that are queued up in this ProcessGroup right now
            BytesQueued *int64 `json:"bytesQueued,omitempty"`
            // Queued - The count/size that is queued in the the process group.
            Queued *string `json:"queued,omitempty"`
            // QueuedCount - The count that is queued for the process group.
            QueuedCount *string `json:"queuedCount,omitempty"`
            // QueuedSize - The size that is queued for the process group.
            QueuedSize *string `json:"queuedSize,omitempty"`
            // BytesRead - The number of bytes read by components in this ProcessGroup in the last 5 minutes
            BytesRead *int64 `json:"bytesRead,omitempty"`
            // Read - The number of bytes read in the last 5 minutes.
            Read *string `json:"read,omitempty"`
            // BytesWritten - The number of bytes written by components in this ProcessGroup in the last 5 minutes
            BytesWritten *int64 `json:"bytesWritten,omitempty"`
            // Written - The number of bytes written in the last 5 minutes.
            Written *string `json:"written,omitempty"`
            // FlowFilesOut - The number of FlowFiles transferred out of this ProcessGroup in the last 5 minutes
            FlowFilesOut *int32 `json:"flowFilesOut,omitempty"`
            // BytesOut - The number of bytes transferred out of this ProcessGroup in the last 5 minutes
            BytesOut *int64 `json:"bytesOut,omitempty"`
            // Output - The output count/size for the process group in the last 5 minutes.
            Output *string `json:"output,omitempty"`
            // FlowFilesTransferred - The number of FlowFiles transferred in this ProcessGroup in the last 5 minutes
            FlowFilesTransferred *int32 `json:"flowFilesTransferred,omitempty"`
            // BytesTransferred - The number of bytes transferred in this ProcessGroup in the last 5 minutes
            BytesTransferred *int64 `json:"bytesTransferred,omitempty"`
            // Transferred - The count/size transferred to/frome queues in the process group in the last 5 minutes.
            Transferred *string `json:"transferred,omitempty"`
            // BytesReceived - The number of bytes received from external sources by components within this ProcessGroup in the last 5 minutes
            BytesReceived *int64 `json:"bytesReceived,omitempty"`
            // FlowFilesReceived - The number of FlowFiles received from external sources by components within this ProcessGroup in the last 5 minutes
            FlowFilesReceived *int32 `json:"flowFilesReceived,omitempty"`
            // Received - The count/size sent to the process group in the last 5 minutes.
            Received *string `json:"received,omitempty"`
            // BytesSent - The number of bytes sent to an external sink by components within this ProcessGroup in the last 5 minutes
            BytesSent *int64 `json:"bytesSent,omitempty"`
            // FlowFilesSent - The number of FlowFiles sent to an external sink by components within this ProcessGroup in the last 5 minutes
            FlowFilesSent *int32 `json:"flowFilesSent,omitempty"`
            // Sent - The count/size sent from this process group in the last 5 minutes.
            Sent *string `json:"sent,omitempty"`
            // ActiveThreadCount - The active thread count for this process group.
            ActiveThreadCount *int32 `json:"activeThreadCount,omitempty"`
            }

            // ProcessGroupStatusSnapshotEntity ...
            type ProcessGroupStatusSnapshotEntity struct {
            // ID - The id of the process group.
            ID *string `json:"id,omitempty"`
            // CanRead - Indicates whether the user can read a given resource.
            CanRead *bool `json:"canRead,omitempty"`
            }

            // ProcessorConfigDTO ...
            type ProcessorConfigDTO struct {
            // Properties - The properties for the processor. Properties whose value is not set will only contain the property name.
            Properties map[string]*string `json:"properties"`
            // Descriptors - Descriptors for the processor's properties.
            Descriptors map[string]*PropertyDescriptorDTO `json:"descriptors"`
            // SchedulingPeriod - The frequency with which to schedule the processor. The format of the value will depend on th value of schedulingStrategy.
            SchedulingPeriod *string `json:"schedulingPeriod,omitempty"`
            // SchedulingStrategy - Indcates whether the prcessor should be scheduled to run in event or timer driven mode.
            SchedulingStrategy *string `json:"schedulingStrategy,omitempty"`
            // PenaltyDuration - The amout of time that is used when the process penalizes a flowfile.
            PenaltyDuration *string `json:"penaltyDuration,omitempty"`
            // YieldDuration - The amount of time that must elapse before this processor is scheduled again after yielding.
            YieldDuration *string `json:"yieldDuration,omitempty"`
            // BulletinLevel - The level at which the processor will report bulletins.
            BulletinLevel *string `json:"bulletinLevel,omitempty"`
            // RunDurationMillis - The run duration for the processor in milliseconds.
            RunDurationMillis *int64 `json:"runDurationMillis,omitempty"`
            // ConcurrentlySchedulableTaskCount - The number of tasks that should be concurrently schedule for the processor. If the processor doesn't allow parallol processing then any positive input will be ignored.
            ConcurrentlySchedulableTaskCount *int32 `json:"concurrentlySchedulableTaskCount,omitempty"`
            // AutoTerminatedRelationships - The names of all relationships that cause a flow file to be terminated if the relationship is not connected elsewhere. This property differs from the 'isAutoTerminate' property of the RelationshipDTO in that the RelationshipDTO is meant to depict the current configuration, whereas this property can be set in a DTO when updating a Processor in order to change which Relationships should be auto-terminated.
            AutoTerminatedRelationships *[]string `json:"autoTerminatedRelationships,omitempty"`
            // Comments - The comments for the processor.
            Comments *string `json:"comments,omitempty"`
            // CustomUIURL - The URL for the processor's custom configuration UI if applicable.
            CustomUIURL *string `json:"customUiUrl,omitempty"`
            // LossTolerant - Whether the processor is loss tolerant.
            LossTolerant *bool `json:"lossTolerant,omitempty"`
            // AnnotationData - The annotation data for the processor used to relay configuration between a custom UI and the procesosr.
            AnnotationData *string `json:"annotationData,omitempty"`
            // DefaultConcurrentTasks - Maps default values for concurrent tasks for each applicable scheduling strategy.
            DefaultConcurrentTasks map[string]*string `json:"defaultConcurrentTasks"`
            // DefaultSchedulingPeriod - Maps default values for scheduling period for each applicable scheduling strategy.
            DefaultSchedulingPeriod map[string]*string `json:"defaultSchedulingPeriod"`
            }

        // MarshalJSON is the custom marshaler for ProcessorConfigDTO.
        func (pcd ProcessorConfigDTO)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(pcd.Properties != nil) {
                objectMap["properties"] = pcd.Properties
                }
                if(pcd.Descriptors != nil) {
                objectMap["descriptors"] = pcd.Descriptors
                }
                if(pcd.SchedulingPeriod != nil) {
                objectMap["schedulingPeriod"] = pcd.SchedulingPeriod
                }
                if(pcd.SchedulingStrategy != nil) {
                objectMap["schedulingStrategy"] = pcd.SchedulingStrategy
                }
                if(pcd.PenaltyDuration != nil) {
                objectMap["penaltyDuration"] = pcd.PenaltyDuration
                }
                if(pcd.YieldDuration != nil) {
                objectMap["yieldDuration"] = pcd.YieldDuration
                }
                if(pcd.BulletinLevel != nil) {
                objectMap["bulletinLevel"] = pcd.BulletinLevel
                }
                if(pcd.RunDurationMillis != nil) {
                objectMap["runDurationMillis"] = pcd.RunDurationMillis
                }
                if(pcd.ConcurrentlySchedulableTaskCount != nil) {
                objectMap["concurrentlySchedulableTaskCount"] = pcd.ConcurrentlySchedulableTaskCount
                }
                if(pcd.AutoTerminatedRelationships != nil) {
                objectMap["autoTerminatedRelationships"] = pcd.AutoTerminatedRelationships
                }
                if(pcd.Comments != nil) {
                objectMap["comments"] = pcd.Comments
                }
                if(pcd.CustomUIURL != nil) {
                objectMap["customUiUrl"] = pcd.CustomUIURL
                }
                if(pcd.LossTolerant != nil) {
                objectMap["lossTolerant"] = pcd.LossTolerant
                }
                if(pcd.AnnotationData != nil) {
                objectMap["annotationData"] = pcd.AnnotationData
                }
                if(pcd.DefaultConcurrentTasks != nil) {
                objectMap["defaultConcurrentTasks"] = pcd.DefaultConcurrentTasks
                }
                if(pcd.DefaultSchedulingPeriod != nil) {
                objectMap["defaultSchedulingPeriod"] = pcd.DefaultSchedulingPeriod
                }
                return json.Marshal(objectMap)
        }

            // ProcessorDTO ...
            type ProcessorDTO struct {
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // ParentGroupID - The id of parent process group of this component if applicable.
            ParentGroupID *string `json:"parentGroupId,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            // Name - The name of the processor.
            Name *string `json:"name,omitempty"`
            // Type - The type of the processor.
            Type *string `json:"type,omitempty"`
            // State - The state of the processor. Possible values include: 'State2RUNNING', 'State2STOPPED', 'State2DISABLED'
            State State2 `json:"state,omitempty"`
            // Style - Styles for the processor (background-color => #eee).
            Style map[string]*string `json:"style"`
            // Relationships - The available relationships that the processor currently supports.
            Relationships *[]RelationshipDTO `json:"relationships,omitempty"`
            // Description - The description of the processor.
            Description *string `json:"description,omitempty"`
            // SupportsParallelProcessing - Whether the processor supports parallel processing.
            SupportsParallelProcessing *bool `json:"supportsParallelProcessing,omitempty"`
            // SupportsEventDriven - Whether the processor supports event driven scheduling.
            SupportsEventDriven *bool `json:"supportsEventDriven,omitempty"`
            // SupportsBatching - Whether the processor supports batching. This makes the run duration settings available.
            SupportsBatching *bool `json:"supportsBatching,omitempty"`
            // PersistsState - Whether the processor persists state.
            PersistsState *bool `json:"persistsState,omitempty"`
            // InputRequirement - The input requirement for this processor.
            InputRequirement *string `json:"inputRequirement,omitempty"`
            // Config - The configuration details for the processor. These details will be included in a resopnse if the verbose flag is included in a request.
            Config *ProcessorConfigDTO `json:"config,omitempty"`
            // ValidationErrors - The validation errors for the processor. These validation errors represent the problems with the processor that must be resolved before it can be started.
            ValidationErrors *[]string `json:"validationErrors,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ProcessorDTO.
        func (pd ProcessorDTO)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(pd.ID != nil) {
                objectMap["id"] = pd.ID
                }
                if(pd.ParentGroupID != nil) {
                objectMap["parentGroupId"] = pd.ParentGroupID
                }
                if(pd.Position != nil) {
                objectMap["position"] = pd.Position
                }
                if(pd.Name != nil) {
                objectMap["name"] = pd.Name
                }
                if(pd.Type != nil) {
                objectMap["type"] = pd.Type
                }
                if(pd.State != "") {
                objectMap["state"] = pd.State
                }
                if(pd.Style != nil) {
                objectMap["style"] = pd.Style
                }
                if(pd.Relationships != nil) {
                objectMap["relationships"] = pd.Relationships
                }
                if(pd.Description != nil) {
                objectMap["description"] = pd.Description
                }
                if(pd.SupportsParallelProcessing != nil) {
                objectMap["supportsParallelProcessing"] = pd.SupportsParallelProcessing
                }
                if(pd.SupportsEventDriven != nil) {
                objectMap["supportsEventDriven"] = pd.SupportsEventDriven
                }
                if(pd.SupportsBatching != nil) {
                objectMap["supportsBatching"] = pd.SupportsBatching
                }
                if(pd.PersistsState != nil) {
                objectMap["persistsState"] = pd.PersistsState
                }
                if(pd.InputRequirement != nil) {
                objectMap["inputRequirement"] = pd.InputRequirement
                }
                if(pd.Config != nil) {
                objectMap["config"] = pd.Config
                }
                if(pd.ValidationErrors != nil) {
                objectMap["validationErrors"] = pd.ValidationErrors
                }
                return json.Marshal(objectMap)
        }

            // ProcessorEntity ...
            type ProcessorEntity struct {
            autorest.Response `json:"-"`
            // Revision - The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.
            Revision *RevisionDTO `json:"revision,omitempty"`
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // URI - The URI for futures requests to the component.
            URI *string `json:"uri,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            // Permissions - The permissions for this component.
            Permissions *PermissionsDTO `json:"permissions,omitempty"`
            // Bulletins - The bulletins for this component.
            Bulletins *[]BulletinEntity `json:"bulletins,omitempty"`
            Component *ProcessorDTO `json:"component,omitempty"`
            // InputRequirement - The input requirement for this processor.
            InputRequirement *string `json:"inputRequirement,omitempty"`
            Status *ProcessorStatusDTO `json:"status,omitempty"`
            }

            // ProcessorsEntity ...
            type ProcessorsEntity struct {
            autorest.Response `json:"-"`
            Processors *[]ProcessorEntity `json:"processors,omitempty"`
            }

            // ProcessorStatusDTO ...
            type ProcessorStatusDTO struct {
            // GroupID - The unique ID of the process group that the Processor belongs to
            GroupID *string `json:"groupId,omitempty"`
            // ID - The unique ID of the Processor
            ID *string `json:"id,omitempty"`
            // Name - The name of the Processor
            Name *string `json:"name,omitempty"`
            // Type - The type of the Processor
            Type *string `json:"type,omitempty"`
            // RunStatus - The run status of the Processor
            RunStatus *string `json:"runStatus,omitempty"`
            // StatsLastRefreshed - The timestamp of when the stats were last refreshed
            StatsLastRefreshed *string `json:"statsLastRefreshed,omitempty"`
            // AggregateSnapshot - A status snapshot that represents the aggregate stats of all nodes in the cluster. If the NiFi instance is a standalone instance, rather than a cluster, this represents the stats of the single instance.
            AggregateSnapshot *ProcessorStatusSnapshotDTO `json:"aggregateSnapshot,omitempty"`
            // NodeSnapshots - A status snapshot for each node in the cluster. If the NiFi instance is a standalone instance, rather than a cluster, this may be null.
            NodeSnapshots *[]NodeProcessorStatusSnapshotDTO `json:"nodeSnapshots,omitempty"`
            }

            // ProcessorStatusEntity ...
            type ProcessorStatusEntity struct {
            autorest.Response `json:"-"`
            ProcessorStatus *ProcessorStatusDTO `json:"processorStatus,omitempty"`
            // CanRead - Indicates whether the user can read a given resource.
            CanRead *bool `json:"canRead,omitempty"`
            }

            // ProcessorStatusSnapshotDTO ...
            type ProcessorStatusSnapshotDTO struct {
            // ID - The id of the processor.
            ID *string `json:"id,omitempty"`
            // GroupID - The id of the parent process group to which the processor belongs.
            GroupID *string `json:"groupId,omitempty"`
            // Name - The name of the prcessor.
            Name *string `json:"name,omitempty"`
            // Type - The type of the processor.
            Type *string `json:"type,omitempty"`
            // RunStatus - The state of the processor. Possible values include: 'RUNNING', 'STOPPED', 'DISABLED', 'INVALID'
            RunStatus RunStatus `json:"runStatus,omitempty"`
            // BytesRead - The number of bytes read by this Processor in the last 5 mintues
            BytesRead *int64 `json:"bytesRead,omitempty"`
            // BytesWritten - The number of bytes written by this Processor in the last 5 minutes
            BytesWritten *int64 `json:"bytesWritten,omitempty"`
            // Read - The number of bytes read in the last 5 minutes.
            Read *string `json:"read,omitempty"`
            // Written - The number of bytes written in the last 5 minutes.
            Written *string `json:"written,omitempty"`
            // FlowFilesIn - The number of FlowFiles that have been accepted in the last 5 minutes
            FlowFilesIn *int32 `json:"flowFilesIn,omitempty"`
            // BytesIn - The size of the FlowFiles that have been accepted in the last 5 minutes
            BytesIn *int64 `json:"bytesIn,omitempty"`
            // Input - The count/size of flowfiles that have been accepted in the last 5 minutes.
            Input *string `json:"input,omitempty"`
            // FlowFilesOut - The number of FlowFiles transferred to a Connection in the last 5 minutes
            FlowFilesOut *int32 `json:"flowFilesOut,omitempty"`
            // BytesOut - The size of the FlowFiles transferred to a Connection in the last 5 minutes
            BytesOut *int64 `json:"bytesOut,omitempty"`
            // Output - The count/size of flowfiles that have been processed in the last 5 minutes.
            Output *string `json:"output,omitempty"`
            // TaskCount - The number of times this Processor has run in the last 5 minutes
            TaskCount *int32 `json:"taskCount,omitempty"`
            // TasksDurationNanos - The number of nanoseconds that this Processor has spent running in the last 5 minutes
            TasksDurationNanos *int64 `json:"tasksDurationNanos,omitempty"`
            // Tasks - The total number of task this connectable has completed over the last 5 minutes.
            Tasks *string `json:"tasks,omitempty"`
            // TasksDuration - The total duration of all tasks for this connectable over the last 5 minutes.
            TasksDuration *string `json:"tasksDuration,omitempty"`
            // ActiveThreadCount - The number of threads currently executing in the processor.
            ActiveThreadCount *int32 `json:"activeThreadCount,omitempty"`
            }

            // ProcessorStatusSnapshotEntity ...
            type ProcessorStatusSnapshotEntity struct {
            // ID - The id of the processor.
            ID *string `json:"id,omitempty"`
            ProcessorStatusSnapshot *ProcessorStatusSnapshotDTO `json:"processorStatusSnapshot,omitempty"`
            // CanRead - Indicates whether the user can read a given resource.
            CanRead *bool `json:"canRead,omitempty"`
            }

            // ProcessorTypesEntity ...
            type ProcessorTypesEntity struct {
            autorest.Response `json:"-"`
            ProcessorTypes *[]DocumentedTypeDTO `json:"processorTypes,omitempty"`
            }

            // PropertyDescriptorDTO ...
            type PropertyDescriptorDTO struct {
            // Name - The name for the property.
            Name *string `json:"name,omitempty"`
            // DisplayName - The human readable name for the property.
            DisplayName *string `json:"displayName,omitempty"`
            // Description - The descriptoin for the property. Used to relay additional details to a user or provide a mechanism of documenting intent.
            Description *string `json:"description,omitempty"`
            // DefaultValue - The default value for the property.
            DefaultValue *string `json:"defaultValue,omitempty"`
            // AllowableValues - Allowable values for the property. If empty then the allowed values are not constrained.
            AllowableValues *[]AllowableValueEntity `json:"allowableValues,omitempty"`
            // Required - Whether the property is required.
            Required *bool `json:"required,omitempty"`
            // Sensitive - Whether the property is sensitive and protected whenever stored or represented.
            Sensitive *bool `json:"sensitive,omitempty"`
            // Dynamic - Whether the property is dynamic (user-defined).
            Dynamic *bool `json:"dynamic,omitempty"`
            // SupportsEl - Whether the property supports expression language.
            SupportsEl *bool `json:"supportsEl,omitempty"`
            // IdentifiesControllerService - If the property identifies a controller service, this returns the fully qualified type.
            IdentifiesControllerService *string `json:"identifiesControllerService,omitempty"`
            }

            // PropertyDescriptorEntity ...
            type PropertyDescriptorEntity struct {
            autorest.Response `json:"-"`
            PropertyDescriptor *PropertyDescriptorDTO `json:"propertyDescriptor,omitempty"`
            }

            // PropertyHistoryDTO ...
            type PropertyHistoryDTO struct {
            // PreviousValues - Previous values for a given property.
            PreviousValues *[]PreviousValueDTO `json:"previousValues,omitempty"`
            }

            // ProvenanceDTO ...
            type ProvenanceDTO struct {
            // ID - The id of the provenance query.
            ID *string `json:"id,omitempty"`
            // URI - The URI for this query. Used for obtaining/deleting the request at a later time
            URI *string `json:"uri,omitempty"`
            // SubmissionTime - The timestamp when the query was submitted.
            SubmissionTime *string `json:"submissionTime,omitempty"`
            // Expiration - The timestamp when the query will expire.
            Expiration *string `json:"expiration,omitempty"`
            // PercentCompleted - The current percent complete.
            PercentCompleted *int32 `json:"percentCompleted,omitempty"`
            // Finished - Whether the query has finished.
            Finished *bool `json:"finished,omitempty"`
            // Request - The provenance request.
            Request *ProvenanceRequestDTO `json:"request,omitempty"`
            // Results - The provenance results.
            Results *ProvenanceResultsDTO `json:"results,omitempty"`
            }

            // ProvenanceEntity ...
            type ProvenanceEntity struct {
            autorest.Response `json:"-"`
            Provenance *ProvenanceDTO `json:"provenance,omitempty"`
            }

            // ProvenanceEventDTO ...
            type ProvenanceEventDTO struct {
            // ID - The event uuid.
            ID *string `json:"id,omitempty"`
            // EventID - The event id. This is a one up number thats unique per node.
            EventID *int64 `json:"eventId,omitempty"`
            // EventTime - The timestamp of the event.
            EventTime *string `json:"eventTime,omitempty"`
            // EventDuration - The event duration in milliseconds.
            EventDuration *int64 `json:"eventDuration,omitempty"`
            // LineageDuration - The duration since the lineage began, in milliseconds.
            LineageDuration *int64 `json:"lineageDuration,omitempty"`
            // EventType - The type of the event.
            EventType *string `json:"eventType,omitempty"`
            // FlowFileUUID - The uuid of the flowfile for the event.
            FlowFileUUID *string `json:"flowFileUuid,omitempty"`
            // FileSize - The size of the flowfile for the event.
            FileSize *string `json:"fileSize,omitempty"`
            // FileSizeBytes - The size of the flowfile in bytes for the event.
            FileSizeBytes *int64 `json:"fileSizeBytes,omitempty"`
            // ClusterNodeID - The identifier for the node where the event originated.
            ClusterNodeID *string `json:"clusterNodeId,omitempty"`
            // ClusterNodeAddress - The label for the node where the event originated.
            ClusterNodeAddress *string `json:"clusterNodeAddress,omitempty"`
            // GroupID - The id of the group that the component resides in. If the component is no longer in the flow, the group id will not be set.
            GroupID *string `json:"groupId,omitempty"`
            // ComponentID - The id of the component that generated the event.
            ComponentID *string `json:"componentId,omitempty"`
            // ComponentType - The type of the component that generated the event.
            ComponentType *string `json:"componentType,omitempty"`
            // ComponentName - The name of the component that generated the event.
            ComponentName *string `json:"componentName,omitempty"`
            // SourceSystemFlowFileID - The source system flowfile id.
            SourceSystemFlowFileID *string `json:"sourceSystemFlowFileId,omitempty"`
            // AlternateIdentifierURI - The alternate identifier uri for the fileflow for the event.
            AlternateIdentifierURI *string `json:"alternateIdentifierUri,omitempty"`
            // Attributes - The attributes of the flowfile for the event.
            Attributes *[]AttributeDTO `json:"attributes,omitempty"`
            // ParentUuids - The parent uuids for the event.
            ParentUuids *[]string `json:"parentUuids,omitempty"`
            // ChildUuids - The child uuids for the event.
            ChildUuids *[]string `json:"childUuids,omitempty"`
            // TransitURI - The source/destination system uri if the event was a RECEIVE/SEND.
            TransitURI *string `json:"transitUri,omitempty"`
            // Relationship - The relationship to which the flowfile was routed if the event is of type ROUTE.
            Relationship *string `json:"relationship,omitempty"`
            // Details - The event details.
            Details *string `json:"details,omitempty"`
            // ContentEqual - Whether the input and output content claim is the same.
            ContentEqual *bool `json:"contentEqual,omitempty"`
            // InputContentAvailable - Whether the input content is still available.
            InputContentAvailable *bool `json:"inputContentAvailable,omitempty"`
            // InputContentClaimSection - The section in which the input content claim lives.
            InputContentClaimSection *string `json:"inputContentClaimSection,omitempty"`
            // InputContentClaimContainer - The container in which the input content claim lives.
            InputContentClaimContainer *string `json:"inputContentClaimContainer,omitempty"`
            // InputContentClaimIdentifier - The identifier of the input content claim.
            InputContentClaimIdentifier *string `json:"inputContentClaimIdentifier,omitempty"`
            // InputContentClaimOffset - The offset into the input content claim where the flowfiles content begins.
            InputContentClaimOffset *int64 `json:"inputContentClaimOffset,omitempty"`
            // InputContentClaimFileSize - The file size of the input content claim formatted.
            InputContentClaimFileSize *string `json:"inputContentClaimFileSize,omitempty"`
            // InputContentClaimFileSizeBytes - The file size of the intput content claim in bytes.
            InputContentClaimFileSizeBytes *int64 `json:"inputContentClaimFileSizeBytes,omitempty"`
            // OutputContentAvailable - Whether the output content is still available.
            OutputContentAvailable *bool `json:"outputContentAvailable,omitempty"`
            // OutputContentClaimSection - The section in which the output content claim lives.
            OutputContentClaimSection *string `json:"outputContentClaimSection,omitempty"`
            // OutputContentClaimContainer - The container in which the output content claim lives.
            OutputContentClaimContainer *string `json:"outputContentClaimContainer,omitempty"`
            // OutputContentClaimIdentifier - The identifier of the output content claim.
            OutputContentClaimIdentifier *string `json:"outputContentClaimIdentifier,omitempty"`
            // OutputContentClaimOffset - The offset into the output content claim where the flowfiles content begins.
            OutputContentClaimOffset *int64 `json:"outputContentClaimOffset,omitempty"`
            // OutputContentClaimFileSize - The file size of the output content claim formatted.
            OutputContentClaimFileSize *string `json:"outputContentClaimFileSize,omitempty"`
            // OutputContentClaimFileSizeBytes - The file size of the output content claim in bytes.
            OutputContentClaimFileSizeBytes *int64 `json:"outputContentClaimFileSizeBytes,omitempty"`
            // ReplayAvailable - Whether or not replay is available.
            ReplayAvailable *bool `json:"replayAvailable,omitempty"`
            // ReplayExplanation - Explanation as to why replay is unavailable.
            ReplayExplanation *string `json:"replayExplanation,omitempty"`
            // SourceConnectionIdentifier - The identifier of the queue/connection from which the flowfile was pulled to genereate this event. May be null if the queue/connection is unknown or the flowfile was generated from this event.
            SourceConnectionIdentifier *string `json:"sourceConnectionIdentifier,omitempty"`
            }

            // ProvenanceEventEntity ...
            type ProvenanceEventEntity struct {
            autorest.Response `json:"-"`
            ProvenanceEvent *ProvenanceEventDTO `json:"provenanceEvent,omitempty"`
            }

            // ProvenanceLinkDTO ...
            type ProvenanceLinkDTO struct {
            // SourceID - The source node id of the link.
            SourceID *string `json:"sourceId,omitempty"`
            // TargetID - The target node id of the link.
            TargetID *string `json:"targetId,omitempty"`
            // FlowFileUUID - The flowfile uuid that traversed the link.
            FlowFileUUID *string `json:"flowFileUuid,omitempty"`
            // Timestamp - The timestamp of the link (based on the destination).
            Timestamp *string `json:"timestamp,omitempty"`
            // Millis - The timestamp of this link in milliseconds.
            Millis *int64 `json:"millis,omitempty"`
            }

            // ProvenanceNodeDTO ...
            type ProvenanceNodeDTO struct {
            // ID - The id of the node.
            ID *string `json:"id,omitempty"`
            // FlowFileUUID - The uuid of the flowfile associated with the provenance event.
            FlowFileUUID *string `json:"flowFileUuid,omitempty"`
            // ParentUuids - The uuid of the parent flowfiles of the provenance event.
            ParentUuids *[]string `json:"parentUuids,omitempty"`
            // ChildUuids - The uuid of the childrent flowfiles of the provenance event.
            ChildUuids *[]string `json:"childUuids,omitempty"`
            // ClusterNodeIdentifier - The identifier of the node that this event/flowfile originated from.
            ClusterNodeIdentifier *string `json:"clusterNodeIdentifier,omitempty"`
            // Type - The type of the node. Possible values include: 'Type2FLOWFILE', 'Type2EVENT'
            Type Type2 `json:"type,omitempty"`
            // EventType - If the type is EVENT, this is the type of event.
            EventType *string `json:"eventType,omitempty"`
            // Millis - The timestamp of the node in milliseconds.
            Millis *int64 `json:"millis,omitempty"`
            // Timestamp - The timestamp of the node formatted.
            Timestamp *string `json:"timestamp,omitempty"`
            }

            // ProvenanceOptionsDTO ...
            type ProvenanceOptionsDTO struct {
            // SearchableFields - The available searchable field for the NiFi.
            SearchableFields *[]ProvenanceSearchableFieldDTO `json:"searchableFields,omitempty"`
            }

            // ProvenanceOptionsEntity ...
            type ProvenanceOptionsEntity struct {
            autorest.Response `json:"-"`
            ProvenanceOptions *ProvenanceOptionsDTO `json:"provenanceOptions,omitempty"`
            }

            // ProvenanceRequestDTO ...
            type ProvenanceRequestDTO struct {
            // SearchTerms - The search terms used to perform the search.
            SearchTerms map[string]*string `json:"searchTerms"`
            // ClusterNodeID - The id of the node in the cluster where this provenance originated.
            ClusterNodeID *string `json:"clusterNodeId,omitempty"`
            // StartDate - The earliest event time to include in the query.
            StartDate *string `json:"startDate,omitempty"`
            // EndDate - The latest event time to include in the query.
            EndDate *string `json:"endDate,omitempty"`
            // MinimumFileSize - The minimum file size to include in the query.
            MinimumFileSize *string `json:"minimumFileSize,omitempty"`
            // MaximumFileSize - The maximum file size to include in the query.
            MaximumFileSize *string `json:"maximumFileSize,omitempty"`
            // MaxResults - The maximum number of results to include.
            MaxResults *int32 `json:"maxResults,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ProvenanceRequestDTO.
        func (prd ProvenanceRequestDTO)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(prd.SearchTerms != nil) {
                objectMap["searchTerms"] = prd.SearchTerms
                }
                if(prd.ClusterNodeID != nil) {
                objectMap["clusterNodeId"] = prd.ClusterNodeID
                }
                if(prd.StartDate != nil) {
                objectMap["startDate"] = prd.StartDate
                }
                if(prd.EndDate != nil) {
                objectMap["endDate"] = prd.EndDate
                }
                if(prd.MinimumFileSize != nil) {
                objectMap["minimumFileSize"] = prd.MinimumFileSize
                }
                if(prd.MaximumFileSize != nil) {
                objectMap["maximumFileSize"] = prd.MaximumFileSize
                }
                if(prd.MaxResults != nil) {
                objectMap["maxResults"] = prd.MaxResults
                }
                return json.Marshal(objectMap)
        }

            // ProvenanceResultsDTO ...
            type ProvenanceResultsDTO struct {
            // ProvenanceEvents - The provenance events that matched the search criteria.
            ProvenanceEvents *[]ProvenanceEventDTO `json:"provenanceEvents,omitempty"`
            // Total - The total number of results formatted.
            Total *string `json:"total,omitempty"`
            // TotalCount - The total number of results.
            TotalCount *int64 `json:"totalCount,omitempty"`
            // Generated - Then the search was performed.
            Generated *string `json:"generated,omitempty"`
            // OldestEvent - The oldest event available in the provenance repository.
            OldestEvent *string `json:"oldestEvent,omitempty"`
            // TimeOffset - The time offset of the server that's used for event time.
            TimeOffset *int32 `json:"timeOffset,omitempty"`
            // Errors - Any errors that occurred while performing the provenance request.
            Errors *[]string `json:"errors,omitempty"`
            }

            // ProvenanceSearchableFieldDTO ...
            type ProvenanceSearchableFieldDTO struct {
            // ID - The id of the searchable field.
            ID *string `json:"id,omitempty"`
            // Field - The searchable field.
            Field *string `json:"field,omitempty"`
            // Label - The label for the searchable field.
            Label *string `json:"label,omitempty"`
            // Type - The type of the searchable field.
            Type *string `json:"type,omitempty"`
            }

            // QueueSizeDTO ...
            type QueueSizeDTO struct {
            // ByteCount - The size of objects in a queue.
            ByteCount *int64 `json:"byteCount,omitempty"`
            // ObjectCount - The count of objects in a queue.
            ObjectCount *int32 `json:"objectCount,omitempty"`
            }

            // RelationshipDTO ...
            type RelationshipDTO struct {
            // Name - The relationship name.
            Name *string `json:"name,omitempty"`
            // Description - The relationship description.
            Description *string `json:"description,omitempty"`
            // AutoTerminate - Whether or not flowfiles sent to this relationship should auto terminate.
            AutoTerminate *bool `json:"autoTerminate,omitempty"`
            }

            // RemoteProcessGroupContentsDTO ...
            type RemoteProcessGroupContentsDTO struct {
            // InputPorts - The input ports to which data can be sent.
            InputPorts *[]RemoteProcessGroupPortDTO `json:"inputPorts,omitempty"`
            // OutputPorts - The output ports from which data can be retrieved.
            OutputPorts *[]RemoteProcessGroupPortDTO `json:"outputPorts,omitempty"`
            }

            // RemoteProcessGroupDTO ...
            type RemoteProcessGroupDTO struct {
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // ParentGroupID - The id of parent process group of this component if applicable.
            ParentGroupID *string `json:"parentGroupId,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            // TargetURI - The target URI of the remote process group.
            TargetURI *string `json:"targetUri,omitempty"`
            // TargetSecure - Whether the target is running securely.
            TargetSecure *bool `json:"targetSecure,omitempty"`
            // Name - The name of the remote process group.
            Name *string `json:"name,omitempty"`
            // Comments - The comments for the remote process group.
            Comments *string `json:"comments,omitempty"`
            // CommunicationsTimeout - The time period used for the timeout when commicating with the target.
            CommunicationsTimeout *string `json:"communicationsTimeout,omitempty"`
            // YieldDuration - When yielding, this amount of time must elapse before the remote process group is scheduled again.
            YieldDuration *string `json:"yieldDuration,omitempty"`
            TransportProtocol *string `json:"transportProtocol,omitempty"`
            ProxyHost *string `json:"proxyHost,omitempty"`
            ProxyPort *int32 `json:"proxyPort,omitempty"`
            ProxyUser *string `json:"proxyUser,omitempty"`
            ProxyPassword *string `json:"proxyPassword,omitempty"`
            // AuthorizationIssues - Any remote authorization issues for the remote process group.
            AuthorizationIssues *[]string `json:"authorizationIssues,omitempty"`
            // Transmitting - Whether the remote process group is actively transmitting.
            Transmitting *bool `json:"transmitting,omitempty"`
            // InputPortCount - The number of remote input ports currently available on the target.
            InputPortCount *int32 `json:"inputPortCount,omitempty"`
            // OutputPortCount - The number of remote output ports currently available on the target.
            OutputPortCount *int32 `json:"outputPortCount,omitempty"`
            // ActiveRemoteInputPortCount - The number of active remote input ports.
            ActiveRemoteInputPortCount *int32 `json:"activeRemoteInputPortCount,omitempty"`
            // InactiveRemoteInputPortCount - The number of inactive remote input ports.
            InactiveRemoteInputPortCount *int32 `json:"inactiveRemoteInputPortCount,omitempty"`
            // ActiveRemoteOutputPortCount - The number of acitve remote output ports.
            ActiveRemoteOutputPortCount *int32 `json:"activeRemoteOutputPortCount,omitempty"`
            // InactiveRemoteOutputPortCount - The number of inactive remote output ports.
            InactiveRemoteOutputPortCount *int32 `json:"inactiveRemoteOutputPortCount,omitempty"`
            // FlowRefreshed - The timestamp when this remote process group was last refreshed.
            FlowRefreshed *string `json:"flowRefreshed,omitempty"`
            // Contents - The contents of the remote process group. Will contain available input/output ports.
            Contents *RemoteProcessGroupContentsDTO `json:"contents,omitempty"`
            }

            // RemoteProcessGroupEntity ...
            type RemoteProcessGroupEntity struct {
            autorest.Response `json:"-"`
            // Revision - The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.
            Revision *RevisionDTO `json:"revision,omitempty"`
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // URI - The URI for futures requests to the component.
            URI *string `json:"uri,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            // Permissions - The permissions for this component.
            Permissions *PermissionsDTO `json:"permissions,omitempty"`
            // Bulletins - The bulletins for this component.
            Bulletins *[]BulletinEntity `json:"bulletins,omitempty"`
            Component *RemoteProcessGroupDTO `json:"component,omitempty"`
            // Status - The status of the remote process group.
            Status *RemoteProcessGroupStatusDTO `json:"status,omitempty"`
            // InputPortCount - The number of remote input ports currently available on the target.
            InputPortCount *int32 `json:"inputPortCount,omitempty"`
            // OutputPortCount - The number of remote output ports currently available on the target.
            OutputPortCount *int32 `json:"outputPortCount,omitempty"`
            }

            // RemoteProcessGroupPortDTO ...
            type RemoteProcessGroupPortDTO struct {
            // ID - The id of the target port.
            ID *string `json:"id,omitempty"`
            // GroupID - The id of the remote process group that the port resides in.
            GroupID *string `json:"groupId,omitempty"`
            // Name - The name of the target port.
            Name *string `json:"name,omitempty"`
            // Comments - The comments as configured on the target port.
            Comments *string `json:"comments,omitempty"`
            // ConcurrentlySchedulableTaskCount - The number of task that may transmit flowfiles to the target port concurrently.
            ConcurrentlySchedulableTaskCount *int32 `json:"concurrentlySchedulableTaskCount,omitempty"`
            // Transmitting - Whether the remote port is configured for transmission.
            Transmitting *bool `json:"transmitting,omitempty"`
            // UseCompression - Whether the flowfiles are compressed when sent to the target port.
            UseCompression *bool `json:"useCompression,omitempty"`
            // Exists - Whether the target port exists.
            Exists *bool `json:"exists,omitempty"`
            // TargetRunning - Whether the target port is running.
            TargetRunning *bool `json:"targetRunning,omitempty"`
            // Connected - Whether the port has either an incoming or outgoing connection.
            Connected *bool `json:"connected,omitempty"`
            }

            // RemoteProcessGroupPortEntity ...
            type RemoteProcessGroupPortEntity struct {
            autorest.Response `json:"-"`
            // Revision - The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.
            Revision *RevisionDTO `json:"revision,omitempty"`
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // URI - The URI for futures requests to the component.
            URI *string `json:"uri,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            // Permissions - The permissions for this component.
            Permissions *PermissionsDTO `json:"permissions,omitempty"`
            // Bulletins - The bulletins for this component.
            Bulletins *[]BulletinEntity `json:"bulletins,omitempty"`
            RemoteProcessGroupPort *RemoteProcessGroupPortDTO `json:"remoteProcessGroupPort,omitempty"`
            }

            // RemoteProcessGroupsEntity ...
            type RemoteProcessGroupsEntity struct {
            autorest.Response `json:"-"`
            RemoteProcessGroups *[]RemoteProcessGroupEntity `json:"remoteProcessGroups,omitempty"`
            }

            // RemoteProcessGroupStatusDTO ...
            type RemoteProcessGroupStatusDTO struct {
            // GroupID - The unique ID of the process group that the Processor belongs to
            GroupID *string `json:"groupId,omitempty"`
            // ID - The unique ID of the Processor
            ID *string `json:"id,omitempty"`
            // Name - The name of the remote process group.
            Name *string `json:"name,omitempty"`
            // TargetURI - The URI of the target system.
            TargetURI *string `json:"targetUri,omitempty"`
            // TransmissionStatus - The transmission status of the remote process group.
            TransmissionStatus *string `json:"transmissionStatus,omitempty"`
            // StatsLastRefreshed - The time the status for the process group was last refreshed.
            StatsLastRefreshed *string `json:"statsLastRefreshed,omitempty"`
            // AggregateSnapshot - A status snapshot that represents the aggregate stats of all nodes in the cluster. If the NiFi instance is a standalone instance, rather than a cluster, this represents the stats of the single instance.
            AggregateSnapshot *RemoteProcessGroupStatusSnapshotDTO `json:"aggregateSnapshot,omitempty"`
            // NodeSnapshots - A status snapshot for each node in the cluster. If the NiFi instance is a standalone instance, rather than a cluster, this may be null.
            NodeSnapshots *[]NodeRemoteProcessGroupStatusSnapshotDTO `json:"nodeSnapshots,omitempty"`
            }

            // RemoteProcessGroupStatusSnapshotDTO ...
            type RemoteProcessGroupStatusSnapshotDTO struct {
            // ID - The id of the remote process group.
            ID *string `json:"id,omitempty"`
            // GroupID - The id of the parent process group the remote process group resides in.
            GroupID *string `json:"groupId,omitempty"`
            // Name - The name of the remote process group.
            Name *string `json:"name,omitempty"`
            // TargetURI - The URI of the target system.
            TargetURI *string `json:"targetUri,omitempty"`
            // TransmissionStatus - The transmission status of the remote process group.
            TransmissionStatus *string `json:"transmissionStatus,omitempty"`
            // ActiveThreadCount - The number of active threads for the remote process group.
            ActiveThreadCount *int32 `json:"activeThreadCount,omitempty"`
            // FlowFilesSent - The number of FlowFiles sent to the remote process group in the last 5 minutes.
            FlowFilesSent *int32 `json:"flowFilesSent,omitempty"`
            // BytesSent - The size of the FlowFiles sent to the remote process group in the last 5 minutes.
            BytesSent *int64 `json:"bytesSent,omitempty"`
            // Sent - The count/size of the flowfiles sent to the remote process group in the last 5 minutes.
            Sent *string `json:"sent,omitempty"`
            // FlowFilesReceived - The number of FlowFiles received from the remote process group in the last 5 minutes.
            FlowFilesReceived *int32 `json:"flowFilesReceived,omitempty"`
            // BytesReceived - The size of the FlowFiles received from the remote process group in the last 5 minutes.
            BytesReceived *int64 `json:"bytesReceived,omitempty"`
            // Received - The count/size of the flowfiles received from the remote process group in the last 5 minutes.
            Received *string `json:"received,omitempty"`
            }

            // RemoteProcessGroupStatusSnapshotEntity ...
            type RemoteProcessGroupStatusSnapshotEntity struct {
            // ID - The id of the remote processo group.
            ID *string `json:"id,omitempty"`
            RemoteProcessGroupStatusSnapshot *RemoteProcessGroupStatusSnapshotDTO `json:"remoteProcessGroupStatusSnapshot,omitempty"`
            // CanRead - Indicates whether the user can read a given resource.
            CanRead *bool `json:"canRead,omitempty"`
            }

            // ReportingTaskDTO ...
            type ReportingTaskDTO struct {
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // ParentGroupID - The id of parent process group of this component if applicable.
            ParentGroupID *string `json:"parentGroupId,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            // Name - The name of the reporting task.
            Name *string `json:"name,omitempty"`
            // Type - The fully qualified type of the reporting task.
            Type *string `json:"type,omitempty"`
            // State - The state of the reporting task. Possible values include: 'State3RUNNING', 'State3STOPPED', 'State3DISABLED'
            State State3 `json:"state,omitempty"`
            // Comments - The comments of the reporting task.
            Comments *string `json:"comments,omitempty"`
            // PersistsState - Whether the reporting task persists state.
            PersistsState *bool `json:"persistsState,omitempty"`
            // SchedulingPeriod - The frequency with which to schedule the reporting task. The format of the value willd epend on the valud of the schedulingStrategy.
            SchedulingPeriod *string `json:"schedulingPeriod,omitempty"`
            // SchedulingStrategy - The scheduling strategy that determines how the schedulingPeriod value should be interpreted.
            SchedulingStrategy *string `json:"schedulingStrategy,omitempty"`
            // DefaultSchedulingPeriod - The default scheduling period for the different scheduling strategies.
            DefaultSchedulingPeriod map[string]*string `json:"defaultSchedulingPeriod"`
            // Properties - The properties of the reporting task.
            Properties map[string]*string `json:"properties"`
            // Descriptors - The descriptors for the reporting tasks properties.
            Descriptors map[string]*PropertyDescriptorDTO `json:"descriptors"`
            // CustomUIURL - The URL for the custom configuration UI for the reporting task.
            CustomUIURL *string `json:"customUiUrl,omitempty"`
            // AnnotationData - The anntation data for the repoting task. This is how the custom UI relays configuration to the reporting task.
            AnnotationData *string `json:"annotationData,omitempty"`
            // ValidationErrors - Gets the validation errors from the reporting task. These validation errors represent the problems with the reporting task that must be resolved before it can be scheduled to run.
            ValidationErrors *[]string `json:"validationErrors,omitempty"`
            // ActiveThreadCount - The number of active threads for the reporting task.
            ActiveThreadCount *int32 `json:"activeThreadCount,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ReportingTaskDTO.
        func (rtd ReportingTaskDTO)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(rtd.ID != nil) {
                objectMap["id"] = rtd.ID
                }
                if(rtd.ParentGroupID != nil) {
                objectMap["parentGroupId"] = rtd.ParentGroupID
                }
                if(rtd.Position != nil) {
                objectMap["position"] = rtd.Position
                }
                if(rtd.Name != nil) {
                objectMap["name"] = rtd.Name
                }
                if(rtd.Type != nil) {
                objectMap["type"] = rtd.Type
                }
                if(rtd.State != "") {
                objectMap["state"] = rtd.State
                }
                if(rtd.Comments != nil) {
                objectMap["comments"] = rtd.Comments
                }
                if(rtd.PersistsState != nil) {
                objectMap["persistsState"] = rtd.PersistsState
                }
                if(rtd.SchedulingPeriod != nil) {
                objectMap["schedulingPeriod"] = rtd.SchedulingPeriod
                }
                if(rtd.SchedulingStrategy != nil) {
                objectMap["schedulingStrategy"] = rtd.SchedulingStrategy
                }
                if(rtd.DefaultSchedulingPeriod != nil) {
                objectMap["defaultSchedulingPeriod"] = rtd.DefaultSchedulingPeriod
                }
                if(rtd.Properties != nil) {
                objectMap["properties"] = rtd.Properties
                }
                if(rtd.Descriptors != nil) {
                objectMap["descriptors"] = rtd.Descriptors
                }
                if(rtd.CustomUIURL != nil) {
                objectMap["customUiUrl"] = rtd.CustomUIURL
                }
                if(rtd.AnnotationData != nil) {
                objectMap["annotationData"] = rtd.AnnotationData
                }
                if(rtd.ValidationErrors != nil) {
                objectMap["validationErrors"] = rtd.ValidationErrors
                }
                if(rtd.ActiveThreadCount != nil) {
                objectMap["activeThreadCount"] = rtd.ActiveThreadCount
                }
                return json.Marshal(objectMap)
        }

            // ReportingTaskEntity ...
            type ReportingTaskEntity struct {
            autorest.Response `json:"-"`
            // Revision - The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.
            Revision *RevisionDTO `json:"revision,omitempty"`
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // URI - The URI for futures requests to the component.
            URI *string `json:"uri,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            // Permissions - The permissions for this component.
            Permissions *PermissionsDTO `json:"permissions,omitempty"`
            // Bulletins - The bulletins for this component.
            Bulletins *[]BulletinEntity `json:"bulletins,omitempty"`
            Component *ReportingTaskDTO `json:"component,omitempty"`
            }

            // ReportingTasksEntity ...
            type ReportingTasksEntity struct {
            autorest.Response `json:"-"`
            ReportingTasks *[]ReportingTaskEntity `json:"reportingTasks,omitempty"`
            }

            // ReportingTaskTypesEntity ...
            type ReportingTaskTypesEntity struct {
            autorest.Response `json:"-"`
            ReportingTaskTypes *[]DocumentedTypeDTO `json:"reportingTaskTypes,omitempty"`
            }

            // ResourceDTO ...
            type ResourceDTO struct {
            // Identifier - The identifier of the resource.
            Identifier *string `json:"identifier,omitempty"`
            // Name - The name of the resource.
            Name *string `json:"name,omitempty"`
            }

            // ResourcesEntity ...
            type ResourcesEntity struct {
            autorest.Response `json:"-"`
            Resources *[]ResourceDTO `json:"resources,omitempty"`
            }

            // RevisionDTO ...
            type RevisionDTO struct {
            // ClientID - A client identifier used to make a request. By including a client identifier, the API can allow multiple requests without needing the current revision. Due to the asynchronous nature of requests/responses this was implemented to allow the client to make numerous requests without having to wait for the previous response to come back
            ClientID *string `json:"clientId,omitempty"`
            // Version - NiFi employs an optimistic locking strategy where the client must include a revision in their request when performing an update. In a response to a mutable flow request, this field represents the updated base version.
            Version *int64 `json:"version,omitempty"`
            // LastModifier - The user that last modified the flow.
            LastModifier *string `json:"lastModifier,omitempty"`
            }

            // ScheduleComponentsEntity ...
            type ScheduleComponentsEntity struct {
            autorest.Response `json:"-"`
            // ID - The id of the ProcessGroup
            ID *string `json:"id,omitempty"`
            // State - The desired state of the descendant components. Possible values include: 'State4RUNNING', 'State4STOPPED'
            State State4 `json:"state,omitempty"`
            // Components - Optional components to schedule. If not specified, all authorized descendant components will be used.
            Components map[string]*RevisionDTO `json:"components"`
            }

        // MarshalJSON is the custom marshaler for ScheduleComponentsEntity.
        func (sce ScheduleComponentsEntity)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(sce.ID != nil) {
                objectMap["id"] = sce.ID
                }
                if(sce.State != "") {
                objectMap["state"] = sce.State
                }
                if(sce.Components != nil) {
                objectMap["components"] = sce.Components
                }
                return json.Marshal(objectMap)
        }

            // SearchResultsDTO ...
            type SearchResultsDTO struct {
            // ProcessorResults - The processors that matched the search.
            ProcessorResults *[]ComponentSearchResultDTO `json:"processorResults,omitempty"`
            // ConnectionResults - The connections that matched the search.
            ConnectionResults *[]ComponentSearchResultDTO `json:"connectionResults,omitempty"`
            // ProcessGroupResults - The process groups that matched the search.
            ProcessGroupResults *[]ComponentSearchResultDTO `json:"processGroupResults,omitempty"`
            // InputPortResults - The input ports that matched the search.
            InputPortResults *[]ComponentSearchResultDTO `json:"inputPortResults,omitempty"`
            // OutputPortResults - The output ports that matched the search.
            OutputPortResults *[]ComponentSearchResultDTO `json:"outputPortResults,omitempty"`
            // RemoteProcessGroupResults - The remote process groups that matched the search.
            RemoteProcessGroupResults *[]ComponentSearchResultDTO `json:"remoteProcessGroupResults,omitempty"`
            // FunnelResults - The funnels that matched the search.
            FunnelResults *[]ComponentSearchResultDTO `json:"funnelResults,omitempty"`
            }

            // SearchResultsEntity ...
            type SearchResultsEntity struct {
            autorest.Response `json:"-"`
            SearchResultsDTO *SearchResultsDTO `json:"searchResultsDTO,omitempty"`
            }

            // Set ...
            type Set struct {
            Empty *bool `json:"empty,omitempty"`
            }

            // SetObject ...
            type SetObject struct {
            autorest.Response `json:"-"`
            Value interface{} `json:"value,omitempty"`
            }

            // SnippetDTO ...
            type SnippetDTO struct {
            // ID - The id of the snippet.
            ID *string `json:"id,omitempty"`
            // URI - The URI of the snippet.
            URI *string `json:"uri,omitempty"`
            // ParentGroupID - The group id for the components in the snippet.
            ParentGroupID *string `json:"parentGroupId,omitempty"`
            // ProcessGroups - The ids of the process groups in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
            ProcessGroups map[string]*RevisionDTO `json:"processGroups"`
            // RemoteProcessGroups - The ids of the remote process groups in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
            RemoteProcessGroups map[string]*RevisionDTO `json:"remoteProcessGroups"`
            // Processors - The ids of the processors in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
            Processors map[string]*RevisionDTO `json:"processors"`
            // InputPorts - The ids of the input ports in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
            InputPorts map[string]*RevisionDTO `json:"inputPorts"`
            // OutputPorts - The ids of the output ports in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
            OutputPorts map[string]*RevisionDTO `json:"outputPorts"`
            // Connections - The ids of the connections in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
            Connections map[string]*RevisionDTO `json:"connections"`
            // Labels - The ids of the labels in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
            Labels map[string]*RevisionDTO `json:"labels"`
            // Funnels - The ids of the funnels in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
            Funnels map[string]*RevisionDTO `json:"funnels"`
            }

        // MarshalJSON is the custom marshaler for SnippetDTO.
        func (sd SnippetDTO)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(sd.ID != nil) {
                objectMap["id"] = sd.ID
                }
                if(sd.URI != nil) {
                objectMap["uri"] = sd.URI
                }
                if(sd.ParentGroupID != nil) {
                objectMap["parentGroupId"] = sd.ParentGroupID
                }
                if(sd.ProcessGroups != nil) {
                objectMap["processGroups"] = sd.ProcessGroups
                }
                if(sd.RemoteProcessGroups != nil) {
                objectMap["remoteProcessGroups"] = sd.RemoteProcessGroups
                }
                if(sd.Processors != nil) {
                objectMap["processors"] = sd.Processors
                }
                if(sd.InputPorts != nil) {
                objectMap["inputPorts"] = sd.InputPorts
                }
                if(sd.OutputPorts != nil) {
                objectMap["outputPorts"] = sd.OutputPorts
                }
                if(sd.Connections != nil) {
                objectMap["connections"] = sd.Connections
                }
                if(sd.Labels != nil) {
                objectMap["labels"] = sd.Labels
                }
                if(sd.Funnels != nil) {
                objectMap["funnels"] = sd.Funnels
                }
                return json.Marshal(objectMap)
        }

            // SnippetEntity ...
            type SnippetEntity struct {
            autorest.Response `json:"-"`
            // Snippet - The snippet.
            Snippet *SnippetDTO `json:"snippet,omitempty"`
            }

            // StateEntryDTO ...
            type StateEntryDTO struct {
            // Key - The key for this state.
            Key *string `json:"key,omitempty"`
            // Value - The value for this state.
            Value *string `json:"value,omitempty"`
            // ClusterNodeID - The identifier for the node where the state originated.
            ClusterNodeID *string `json:"clusterNodeId,omitempty"`
            // ClusterNodeAddress - The label for the node where the state originated.
            ClusterNodeAddress *string `json:"clusterNodeAddress,omitempty"`
            }

            // StateMapDTO ...
            type StateMapDTO struct {
            // Scope - The scope of this StateMap.
            Scope *string `json:"scope,omitempty"`
            // TotalEntryCount - The total number of state entries. When the state map is lengthy, only of portion of the entries are returned.
            TotalEntryCount *int32 `json:"totalEntryCount,omitempty"`
            // State - The state.
            State *[]StateEntryDTO `json:"state,omitempty"`
            }

            // StatusDescriptorDTO ...
            type StatusDescriptorDTO struct {
            // Field - The name of the status field.
            Field *string `json:"field,omitempty"`
            // Label - The label for the status field.
            Label *string `json:"label,omitempty"`
            // Description - The description of the status field.
            Description *string `json:"description,omitempty"`
            // Formatter - The formatter for the status descriptor.
            Formatter *string `json:"formatter,omitempty"`
            }

            // StatusHistoryDTO ...
            type StatusHistoryDTO struct {
            // Generated - When the status history was generated.
            Generated *string `json:"generated,omitempty"`
            // ComponentDetails - A Map of key/value pairs that describe the component that the status history belongs to
            ComponentDetails map[string]*string `json:"componentDetails"`
            // FieldDescriptors - The Descriptors that provide information on each of the metrics provided in the status history
            FieldDescriptors *[]StatusDescriptorDTO `json:"fieldDescriptors,omitempty"`
            // AggregateSnapshots - A list of StatusSnapshotDTO objects that provide the actual metric values for the component. If the NiFi instance is clustered, this will represent the aggregate status across all nodes. If the NiFi instance is not clustered, this will represent the status of the entire NiFi instance.
            AggregateSnapshots *[]StatusSnapshotDTO `json:"aggregateSnapshots,omitempty"`
            // NodeSnapshots - The NodeStatusSnapshotsDTO objects that provide the actual metric values for the component, for each node. If the NiFi instance is not clustered, this value will be null.
            NodeSnapshots *[]NodeStatusSnapshotsDTO `json:"nodeSnapshots,omitempty"`
            }

        // MarshalJSON is the custom marshaler for StatusHistoryDTO.
        func (shd StatusHistoryDTO)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(shd.Generated != nil) {
                objectMap["generated"] = shd.Generated
                }
                if(shd.ComponentDetails != nil) {
                objectMap["componentDetails"] = shd.ComponentDetails
                }
                if(shd.FieldDescriptors != nil) {
                objectMap["fieldDescriptors"] = shd.FieldDescriptors
                }
                if(shd.AggregateSnapshots != nil) {
                objectMap["aggregateSnapshots"] = shd.AggregateSnapshots
                }
                if(shd.NodeSnapshots != nil) {
                objectMap["nodeSnapshots"] = shd.NodeSnapshots
                }
                return json.Marshal(objectMap)
        }

            // StatusHistoryEntity ...
            type StatusHistoryEntity struct {
            autorest.Response `json:"-"`
            StatusHistory *StatusHistoryDTO `json:"statusHistory,omitempty"`
            // CanRead - Indicates whether the user can read a given resource.
            CanRead *bool `json:"canRead,omitempty"`
            }

            // StatusSnapshotDTO ...
            type StatusSnapshotDTO struct {
            // Timestamp - The timestamp of the snapshot.
            Timestamp *string `json:"timestamp,omitempty"`
            // StatusMetrics - The status metrics.
            StatusMetrics map[string]*int64 `json:"statusMetrics"`
            }

        // MarshalJSON is the custom marshaler for StatusSnapshotDTO.
        func (ssd StatusSnapshotDTO)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(ssd.Timestamp != nil) {
                objectMap["timestamp"] = ssd.Timestamp
                }
                if(ssd.StatusMetrics != nil) {
                objectMap["statusMetrics"] = ssd.StatusMetrics
                }
                return json.Marshal(objectMap)
        }

            // StorageUsageDTO ...
            type StorageUsageDTO struct {
            // Identifier - The identifier of this storage location. The identifier will correspond to the identifier keyed in the storage configuration.
            Identifier *string `json:"identifier,omitempty"`
            // FreeSpace - Amount of free space.
            FreeSpace *string `json:"freeSpace,omitempty"`
            // TotalSpace - Amount of total space.
            TotalSpace *string `json:"totalSpace,omitempty"`
            // UsedSpace - Amount of used space.
            UsedSpace *string `json:"usedSpace,omitempty"`
            // FreeSpaceBytes - The number of bytes of free space.
            FreeSpaceBytes *int64 `json:"freeSpaceBytes,omitempty"`
            // TotalSpaceBytes - The number of bytes of total space.
            TotalSpaceBytes *int64 `json:"totalSpaceBytes,omitempty"`
            // UsedSpaceBytes - The number of bytes of used space.
            UsedSpaceBytes *int64 `json:"usedSpaceBytes,omitempty"`
            // Utilization - Utilization of this storage location.
            Utilization *string `json:"utilization,omitempty"`
            }

            // String ...
            type String struct {
            autorest.Response `json:"-"`
            Value *string `json:"value,omitempty"`
            }

            // SubmitReplayRequestEntity ...
            type SubmitReplayRequestEntity struct {
            // EventID - The event identifier
            EventID *int64 `json:"eventId,omitempty"`
            // ClusterNodeID - The identifier of the node where to submit the replay request.
            ClusterNodeID *string `json:"clusterNodeId,omitempty"`
            }

            // SystemDiagnosticsDTO ...
            type SystemDiagnosticsDTO struct {
            // AggregateSnapshot - A systems diagnostic snapshot that represents the aggregate values of all nodes in the cluster. If the NiFi instance is a standalone instance, rather than a cluster, this represents the stats of the single instance.
            AggregateSnapshot *SystemDiagnosticsSnapshotDTO `json:"aggregateSnapshot,omitempty"`
            // NodeSnapshots - A systems diagnostics snapshot for each node in the cluster. If the NiFi instance is a standalone instance, rather than a cluster, this may be null.
            NodeSnapshots *[]NodeSystemDiagnosticsSnapshotDTO `json:"nodeSnapshots,omitempty"`
            }

            // SystemDiagnosticsEntity ...
            type SystemDiagnosticsEntity struct {
            autorest.Response `json:"-"`
            SystemDiagnostics *SystemDiagnosticsDTO `json:"systemDiagnostics,omitempty"`
            }

            // SystemDiagnosticsSnapshotDTO ...
            type SystemDiagnosticsSnapshotDTO struct {
            // TotalNonHeap - Total size of non heap.
            TotalNonHeap *string `json:"totalNonHeap,omitempty"`
            // TotalNonHeapBytes - Total number of bytes allocated to the JVM not used for heap
            TotalNonHeapBytes *int64 `json:"totalNonHeapBytes,omitempty"`
            // UsedNonHeap - Amount of use non heap.
            UsedNonHeap *string `json:"usedNonHeap,omitempty"`
            // UsedNonHeapBytes - Total number of bytes used by the JVM not in the heap space
            UsedNonHeapBytes *int64 `json:"usedNonHeapBytes,omitempty"`
            // FreeNonHeap - Amount of free non heap.
            FreeNonHeap *string `json:"freeNonHeap,omitempty"`
            // FreeNonHeapBytes - Total number of free non-heap bytes available to the JVM
            FreeNonHeapBytes *int64 `json:"freeNonHeapBytes,omitempty"`
            // MaxNonHeap - Maximum size of non heap.
            MaxNonHeap *string `json:"maxNonHeap,omitempty"`
            // MaxNonHeapBytes - The maximum number of bytes that the JVM can use for non-heap purposes
            MaxNonHeapBytes *int64 `json:"maxNonHeapBytes,omitempty"`
            // NonHeapUtilization - Utilization of non heap.
            NonHeapUtilization *string `json:"nonHeapUtilization,omitempty"`
            // TotalHeap - Total size of heap.
            TotalHeap *string `json:"totalHeap,omitempty"`
            // TotalHeapBytes - The total number of bytes that are available for the JVM heap to use
            TotalHeapBytes *int64 `json:"totalHeapBytes,omitempty"`
            // UsedHeap - Amount of used heap.
            UsedHeap *string `json:"usedHeap,omitempty"`
            // UsedHeapBytes - The number of bytes of JVM heap that are currently being used
            UsedHeapBytes *int64 `json:"usedHeapBytes,omitempty"`
            // FreeHeap - Amount of free heap.
            FreeHeap *string `json:"freeHeap,omitempty"`
            // FreeHeapBytes - The number of bytes that are allocated to the JVM heap but not currently being used
            FreeHeapBytes *int64 `json:"freeHeapBytes,omitempty"`
            // MaxHeap - Maximum size of heap.
            MaxHeap *string `json:"maxHeap,omitempty"`
            // MaxHeapBytes - The maximum number of bytes that can be used by the JVM
            MaxHeapBytes *int64 `json:"maxHeapBytes,omitempty"`
            // HeapUtilization - Utilization of heap.
            HeapUtilization *string `json:"heapUtilization,omitempty"`
            // AvailableProcessors - Number of available processors if supported by the underlying system.
            AvailableProcessors *int32 `json:"availableProcessors,omitempty"`
            // ProcessorLoadAverage - The processor load average if supported by the underlying system.
            ProcessorLoadAverage *float64 `json:"processorLoadAverage,omitempty"`
            // TotalThreads - Total number of threads.
            TotalThreads *int32 `json:"totalThreads,omitempty"`
            // DaemonThreads - Number of daemon threads.
            DaemonThreads *int32 `json:"daemonThreads,omitempty"`
            // FlowFileRepositoryStorageUsage - The flowfile repository storage usage.
            FlowFileRepositoryStorageUsage *StorageUsageDTO `json:"flowFileRepositoryStorageUsage,omitempty"`
            // ContentRepositoryStorageUsage - The content repository storage usage.
            ContentRepositoryStorageUsage *[]StorageUsageDTO `json:"contentRepositoryStorageUsage,omitempty"`
            // GarbageCollection - The garbage collection details.
            GarbageCollection *[]GarbageCollectionDTO `json:"garbageCollection,omitempty"`
            // StatsLastRefreshed - When the diagnostics were generated.
            StatsLastRefreshed *string `json:"statsLastRefreshed,omitempty"`
            }

            // TemplateDTO ...
            type TemplateDTO struct {
            autorest.Response `json:"-"`
            // URI - The URI for the template.
            URI *string `json:"uri,omitempty"`
            // ID - The id of the template.
            ID *string `json:"id,omitempty"`
            // GroupID - The id of the Process Group that the template belongs to.
            GroupID *string `json:"groupId,omitempty"`
            // Name - The name of the template.
            Name *string `json:"name,omitempty"`
            // Description - The description of the template.
            Description *string `json:"description,omitempty"`
            // Timestamp - The timestamp when this template was created.
            Timestamp *string `json:"timestamp,omitempty"`
            // EncodingVersion - The encoding version of this template.
            EncodingVersion *string `json:"encodingVersion,omitempty"`
            // Snippet - The contents of the template.
            Snippet *FlowSnippetDTO `json:"snippet,omitempty"`
            }

            // TemplateEntity ...
            type TemplateEntity struct {
            autorest.Response `json:"-"`
            // Revision - The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.
            Revision *RevisionDTO `json:"revision,omitempty"`
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // URI - The URI for futures requests to the component.
            URI *string `json:"uri,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            // Permissions - The permissions for this component.
            Permissions *PermissionsDTO `json:"permissions,omitempty"`
            // Bulletins - The bulletins for this component.
            Bulletins *[]BulletinEntity `json:"bulletins,omitempty"`
            Template *TemplateDTO `json:"template,omitempty"`
            }

            // TemplatesEntity ...
            type TemplatesEntity struct {
            autorest.Response `json:"-"`
            Templates *[]TemplateEntity `json:"templates,omitempty"`
            Generated *date.Time `json:"generated,omitempty"`
            }

            // TenantDTO ...
            type TenantDTO struct {
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // ParentGroupID - The id of parent process group of this component if applicable.
            ParentGroupID *string `json:"parentGroupId,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            // Identity - The identity of the tenant.
            Identity *string `json:"identity,omitempty"`
            }

            // TenantEntity ...
            type TenantEntity struct {
            // Revision - The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.
            Revision *RevisionDTO `json:"revision,omitempty"`
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // URI - The URI for futures requests to the component.
            URI *string `json:"uri,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            // Permissions - The permissions for this component.
            Permissions *PermissionsDTO `json:"permissions,omitempty"`
            // Bulletins - The bulletins for this component.
            Bulletins *[]BulletinEntity `json:"bulletins,omitempty"`
            Component *TenantDTO `json:"component,omitempty"`
            }

            // TransactionResultEntity ...
            type TransactionResultEntity struct {
            autorest.Response `json:"-"`
            FlowFileSent *int32 `json:"flowFileSent,omitempty"`
            ResponseCode *int32 `json:"responseCode,omitempty"`
            Message *string `json:"message,omitempty"`
            }

            // UpdateControllerServiceReferenceRequestEntity ...
            type UpdateControllerServiceReferenceRequestEntity struct {
            // ID - The identifier of the Controller Service.
            ID *string `json:"id,omitempty"`
            // State - The new state of the references for the controller service. Possible values include: 'State5ENABLED', 'State5DISABLED', 'State5RUNNING', 'State5STOPPED'
            State State5 `json:"state,omitempty"`
            // ReferencingComponentRevisions - The revisions for all referencing components.
            ReferencingComponentRevisions map[string]*RevisionDTO `json:"referencingComponentRevisions"`
            }

        // MarshalJSON is the custom marshaler for UpdateControllerServiceReferenceRequestEntity.
        func (ucsrre UpdateControllerServiceReferenceRequestEntity)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(ucsrre.ID != nil) {
                objectMap["id"] = ucsrre.ID
                }
                if(ucsrre.State != "") {
                objectMap["state"] = ucsrre.State
                }
                if(ucsrre.ReferencingComponentRevisions != nil) {
                objectMap["referencingComponentRevisions"] = ucsrre.ReferencingComponentRevisions
                }
                return json.Marshal(objectMap)
        }

            // UserDTO ...
            type UserDTO struct {
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // ParentGroupID - The id of parent process group of this component if applicable.
            ParentGroupID *string `json:"parentGroupId,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            // Identity - The identity of the tenant.
            Identity *string `json:"identity,omitempty"`
            // UserGroups - The groups to which the user belongs. This field is read only and it provided for convenience.
            UserGroups *[]TenantEntity `json:"userGroups,omitempty"`
            // AccessPolicies - The access policies this user belongs to.
            AccessPolicies *[]AccessPolicySummaryEntity `json:"accessPolicies,omitempty"`
            }

            // UserEntity ...
            type UserEntity struct {
            autorest.Response `json:"-"`
            // Revision - The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.
            Revision *RevisionDTO `json:"revision,omitempty"`
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // URI - The URI for futures requests to the component.
            URI *string `json:"uri,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            // Permissions - The permissions for this component.
            Permissions *PermissionsDTO `json:"permissions,omitempty"`
            // Bulletins - The bulletins for this component.
            Bulletins *[]BulletinEntity `json:"bulletins,omitempty"`
            Component *UserDTO `json:"component,omitempty"`
            }

            // UserGroupDTO ...
            type UserGroupDTO struct {
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // ParentGroupID - The id of parent process group of this component if applicable.
            ParentGroupID *string `json:"parentGroupId,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            // Identity - The identity of the tenant.
            Identity *string `json:"identity,omitempty"`
            // Users - The users that belong to the user group.
            Users *[]TenantEntity `json:"users,omitempty"`
            // AccessPolicies - The access policies this user group belongs to.
            AccessPolicies *[]AccessPolicyEntity `json:"accessPolicies,omitempty"`
            }

            // UserGroupEntity ...
            type UserGroupEntity struct {
            autorest.Response `json:"-"`
            // Revision - The revision for this request/response. The revision is required for any mutable flow requests and is included in all responses.
            Revision *RevisionDTO `json:"revision,omitempty"`
            // ID - The id of the component.
            ID *string `json:"id,omitempty"`
            // URI - The URI for futures requests to the component.
            URI *string `json:"uri,omitempty"`
            // Position - The position of this component in the UI if applicable.
            Position *PositionDTO `json:"position,omitempty"`
            // Permissions - The permissions for this component.
            Permissions *PermissionsDTO `json:"permissions,omitempty"`
            // Bulletins - The bulletins for this component.
            Bulletins *[]BulletinEntity `json:"bulletins,omitempty"`
            Component *UserGroupDTO `json:"component,omitempty"`
            }

            // UserGroupsEntity ...
            type UserGroupsEntity struct {
            autorest.Response `json:"-"`
            UserGroups *[]UserGroupEntity `json:"userGroups,omitempty"`
            }

            // UsersEntity ...
            type UsersEntity struct {
            autorest.Response `json:"-"`
            Generated *date.Time `json:"generated,omitempty"`
            Users *[]UserEntity `json:"users,omitempty"`
            }

